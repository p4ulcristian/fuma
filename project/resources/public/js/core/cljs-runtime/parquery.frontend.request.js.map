{"version":3,"sources":["parquery/frontend/request.cljs"],"mappings":"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","names":["parquery.frontend.request/send-queries","query-map","callback","request-data","cljs.core.dissoc","cljs.core.println","cljs.core/keys","c__18605__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__18606__auto__","switch__18343__auto__","state_27851","state_val_27854","inst_27823","inst_27824","inst_27825","cljs.core/PersistentHashMap","inst_27826","cljs.core.async.impl.ioc-helpers/take!","inst_27828","inst_27831","inst_27833","inst_27834","inst_27835","inst_27836","inst_27837","inst_27838","statearr-27862","statearr-27863","statearr-27864","inst_27840","inst_27841","statearr-27865","inst_27843","inst_27844","inst_27845","inst_27846","inst_27847","statearr-27866","inst_27849","cljs.core.async.impl.ioc-helpers/return-chan","statearr-27867","state-machine__18344__auto__","ret-value__18345__auto__","result__18346__auto__","cljs.core/keyword-identical?","ex__18347__auto__","e27868","statearr-27869","cljs.core/seq","statearr-27870","cljs.core/first","state__18607__auto__","statearr-27871","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs_http.client.post","cljs.core._EQ_","js/Error","parquery.frontend.request/parse-query-string","query-string","e27872","cljs.reader.read_string","e"],"sourcesContent":["(ns parquery.frontend.request\n  (:require [cljs.core.async :refer [go <!]]\n            [cljs-http.client :as http]\n            [cljs.reader :as reader]))\n\n(defn send-queries\n  \"Send queries to the parquery backend\"\n  [query-map]\n  (let [callback (:callback query-map)\n        request-data (dissoc query-map :callback)]\n    (println \"DEBUG: ParQuery send-queries called\")\n    (println \"  Request data:\" request-data)\n    (println \"  Queries:\" (keys (:queries request-data)))\n    (go\n      (let [response (<! (http/post \"/parquery\"\n                                    {:transit-params request-data\n                                     :with-credentials? true}))]\n        (println \"DEBUG: ParQuery response received\")\n        (println \"  Status:\" (:status response))\n        (println \"  Body:\" (:body response))\n        (if (= 200 (:status response))\n          (callback (:body response))\n          (throw (js/Error (str \"ParQuery request failed with status \" (:status response) \": \" (:body response)))))))))\n\n(defn parse-query-string\n  \"Parse EDN string into Clojure data\"\n  [query-string]\n  (try\n    (reader/read-string query-string)\n    (catch js/Error e\n      {:success false :error (str \"Parse error: \" (.-message e))})))"]}
{"version":3,"sources":["ui/theme.cljs"],"mappings":";AAKA,kBAAA,2CAAA,uDAAA,2CAAA,iEAAA,2CAAA,0DAAA,UAAA,+DAAA,UAAA,8DAAA,kBAAA,sDAAA,2CAAA,0DAAA,UAAA,+DAAA,UAAA,8DAAA,UAAA,uDAAA,kBAAA,yDAAA,2CAAA,0DAAA,UAAA,+DAAA,kBAAA,0DAAA,2CAAA,0DAAA,UAAA,+DAAA,UAAA,8DAAA,oDAAA,wDAAA,2CAAA,uDAAA,+BAAA,0DAAA,gCAAA,uDAAA,0CAAA,yDAAA,2CAAA,iEAAA,UAAA,oEAAA,UAAA,yEAAA,UAAA,iEAAA,UAAA,0DAAA,0BAAA,qDAAA,2CAAA,iEAAA,2CAAA,0DAAA,UAAA,+DAAA,UAAA,8DAAA,kBAAA,sDAAA,2CAAA,0DAAA,UAAA,+DAAA,UAAA,8DAAA,UAAA,uDAAA,kBAAA,yDAAA,2CAAA,0DAAA,UAAA,+DAAA,kBAAA,0DAAA,2CAAA,0DAAA,UAAA,+DAAA,UAAA,8DAAA,oDAAA,wDAAA,2CAAA,uDAAA,+BAAA,0DAAA,+BAAA,uDAAA,yCAAA,yDAAA,2CAAA,iEAAA,UAAA,oEAAA,UAAA,yEAAA,UAAA,iEAAA,UAAA,0DAAA,n/IAAKA;AA2CL;;;4BAAA,5BAAMC,gEAEHC;AAFH,AAGE,OAACC,4CAAIH,gBAAOE,UAAU,AAAA,qFAAQF;;AAEhC;;;qBAAA,rBAAMI,kDAEHF,UAAUG;AAFb,AAGE,sEAAA,/DAACC,+CAAON,mGAAQE,UAAUG;;AAG5B;;;wBAAA,xBAAME,wDAEHC,cAAcC,WAAWC;AAF5B,AAGE,IAAMC,eAAa,AAACV,0BAAiBO;IAC/BI,cAAY,0EAAA,1EAACT,4CAAIO,gBAAgBF;AADvC,AAEE,OAACK,uGAAMJ,WAAWG;;AAGtB;;;iCAAA,jCAAME,0EAEHN;AAFH,AAAA,kDAAA,iEAGe,iCAAA,mFAAA,iEAAA,rLAACJ,mBAAUI;;AAE1B;;;sBAAA,tBAAMO,oDAEHP;AAFH,AAAA,kDAAA,8TAAA,8WAAA,3mBAGe,iCAAA,mFAAA,iEAAA,rLAACJ,mBAAUI,mSACf,CAAA,yDAAkB,iCAAA,mFAAA,yDAAA,7KAACJ,mBAAUI,ySACzB,iCAAA,mFAAA,wDAAA,5KAACJ,mBAAUI;;AAE1B;;;sBAAA,tBAAMQ,oDAEHR,cAAcS;AAFjB,AAAA,kDAAA,uDAGU,iCAAA,mFAAA,pHAACb,mBAAUI,uJAAqBS;;AAE1C;;;wBAAA,xBAAMC,wDAEHV,cAAcW;AAFjB,AAGE,IAAAC,WAAMD;IAANC,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,kDAAA,sTAAA,oSAAA,yDAAA,llBACwB,iCAAA,mFAAA,0DAAA,9KAAChB,mBAAUI,yRAChB,iCAAA,mFAAA,sDAAA,1KAACJ,mBAAUI;;;KAF9B;AAAA,kDAAA,6TAAA,ySAAA,riBAI0B,iCAAA,mFAAA,iEAAA,rLAACJ,mBAAUI,gSAChB,iCAAA,mFAAA,sDAAA,1KAACJ,mBAAUI,wRACV,CAAA,yDAAkB,iCAAA,mFAAA,yDAAA,7KAACJ,mBAAUI;;;;AANnD;;;;AAUF,IAAAc,iBAAA;IAAAC,iBAAA;IAAAC,iBAAA,mFAAA;IAAAC,iBAGC,WAAKjB,cAAcmB;AAAnB,AACE,OAAC1B,0BAAiBO;;AAJrB,AAAA,6HAAAc,eAAAC,eAAAC,eAAAC,2DAAAH,eAAAC,eAAAC,eAAAC,jRAACC,+DAAAA,4HAAAA;AAMD,IAAAE,iBAAA;IAAAC,iBAAA;IAAAC,iBAAA,mFAAA;IAAAC,iBAGC,WAAKvB,cAAcmB;AAAnB,AACE,OAACb,+BAAsBN;;AAJ1B,AAAA,6HAAAoB,eAAAC,eAAAC,eAAAC,2DAAAH,eAAAC,eAAAC,eAAAC,jRAACL,+DAAAA,4HAAAA;AAMD,IAAAM,iBAAA;IAAAC,iBAAA;IAAAC,iBAAA,mFAAA;IAAAC,iBAGC,yBAAAC,dAAK5B;AAAL,AAAA,IAAA6B,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAoBV;YAApB,AAAAW,4CAAAD,WAAA,IAAA,nEAAsBpB;AAAtB,AACE,OAACD,oBAAWR,cAAcS;;AAJ7B,AAAA,6HAAAe,eAAAC,eAAAC,eAAAC,2DAAAH,eAAAC,eAAAC,eAAAC,jRAACT,+DAAAA,4HAAAA","names":["ui.theme/themes","ui.theme/get-theme-colors","theme-key","cljs.core.get","ui.theme/get-color","color-path","cljs.core.get_in","ui.theme/themed-style","current-theme","base-style","theme-overrides","theme-colors","theme-style","cljs.core.merge","ui.theme/page-background-style","ui.theme/card-style","ui.theme/text-style","level","ui.theme/button-style","type","G__25165","cljs.core/Keyword","G__25166","G__25167","G__25168","G__25169","zero.frontend.re-frame/reg-sub","_","G__25170","G__25171","G__25172","G__25173","G__25174","G__25175","G__25176","G__25177","p__25178","vec__25179","cljs.core.nth"],"sourcesContent":["(ns ui.theme\n  \"Theme system for light/dark mode support\"\n  (:require [zero.frontend.re-frame :as rf]))\n\n;; Theme configurations\n(def themes\n  {:light {:background {:primary \"#f9fafb\"\n                        :secondary \"#ffffff\"\n                        :tertiary \"#f3f4f6\"}\n           :text {:primary \"#1f2937\"\n                  :secondary \"#4b5563\"\n                  :tertiary \"#6b7280\"\n                  :muted \"#9ca3af\"}\n           :border {:primary \"#e5e7eb\"\n                    :secondary \"#d1d5db\"}\n           :accent {:primary \"#14b8a6\"\n                    :secondary \"#ec4899\"\n                    :gradient \"linear-gradient(135deg, #14b8a6, #ec4899)\"}\n           :shadow {:light \"0 2px 4px rgba(0, 0, 0, 0.1)\"\n                    :medium \"0 4px 8px rgba(0, 0, 0, 0.15)\"\n                    :heavy \"0 10px 25px rgba(0, 0, 0, 0.15)\"}\n           :footer {:background \"#374151\"\n                    :text-primary \"#f9fafb\"\n                    :text-secondary \"#d1d5db\"\n                    :text-muted \"#9ca3af\"\n                    :accent \"#60a5fa\"}}\n   :dark {:background {:primary \"#111827\"\n                       :secondary \"#1f2937\"\n                       :tertiary \"#374151\"}\n          :text {:primary \"#f9fafb\"\n                 :secondary \"#e5e7eb\"\n                 :tertiary \"#d1d5db\"\n                 :muted \"#9ca3af\"}\n          :border {:primary \"#374151\"\n                   :secondary \"#4b5563\"}\n          :accent {:primary \"#14b8a6\"\n                   :secondary \"#ec4899\"\n                   :gradient \"linear-gradient(135deg, #14b8a6, #ec4899)\"}\n          :shadow {:light \"0 2px 4px rgba(0, 0, 0, 0.3)\"\n                   :medium \"0 4px 8px rgba(0, 0, 0, 0.4)\"\n                   :heavy \"0 10px 25px rgba(0, 0, 0, 0.5)\"}\n          :footer {:background \"#1f2937\"\n                   :text-primary \"#f9fafb\"\n                   :text-secondary \"#d1d5db\"\n                   :text-muted \"#9ca3af\"\n                   :accent \"#60a5fa\"}}})\n\n;; Helper functions\n(defn get-theme-colors\n  \"Get colors for the current theme\"\n  [theme-key]\n  (get themes theme-key (:light themes)))\n\n(defn get-color\n  \"Get a specific color from the current theme\"\n  [theme-key color-path]\n  (get-in themes [theme-key color-path]))\n\n;; Theme-aware style helpers\n(defn themed-style\n  \"Create a themed style map based on current theme\"\n  [current-theme base-style theme-overrides]\n  (let [theme-colors (get-theme-colors current-theme)\n        theme-style (get theme-overrides current-theme {})]\n    (merge base-style theme-style)))\n\n;; Common themed styles\n(defn page-background-style\n  \"Get page background style for current theme\"\n  [current-theme]\n  {:background (get-color current-theme [:background :primary])})\n\n(defn card-style\n  \"Get card style for current theme\"\n  [current-theme]\n  {:background (get-color current-theme [:background :secondary])\n   :border (str \"1px solid \" (get-color current-theme [:border :primary]))\n   :box-shadow (get-color current-theme [:shadow :light])})\n\n(defn text-style\n  \"Get text style for current theme\"\n  [current-theme level]\n  {:color (get-color current-theme [:text level])})\n\n(defn button-style\n  \"Get button style for current theme\"\n  [current-theme type]\n  (case type\n    :primary {:background (get-color current-theme [:accent :gradient])\n              :color (get-color current-theme [:text :primary])\n              :border \"none\"}\n    :secondary {:background (get-color current-theme [:background :tertiary])\n                :color (get-color current-theme [:text :secondary])\n                :border (str \"1px solid \" (get-color current-theme [:border :secondary]))}\n    {}))\n\n;; Subscription for themed styles\n(rf/reg-sub\n :theme/colors\n :<- [:header/current-theme]\n (fn [current-theme _]\n   (get-theme-colors current-theme)))\n\n(rf/reg-sub\n :theme/page-style\n :<- [:header/current-theme]\n (fn [current-theme _]\n   (page-background-style current-theme)))\n\n(rf/reg-sub\n :theme/text-style\n :<- [:header/current-theme]\n (fn [current-theme [_ level]]\n   (text-style current-theme level)))"]}
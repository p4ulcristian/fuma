["^ ","~:output",["^ ","~:js","goog.provide('re_frame.interceptor');\nre_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\nre_frame.interceptor.optional_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"comment\",\"comment\",532206069),null], null), null);\nre_frame.interceptor.interceptor_QMARK_ = (function re_frame$interceptor$interceptor_QMARK_(m){\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(re_frame.interceptor.mandatory_interceptor_keys,clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.optional_interceptor_keys))));\n});\nre_frame.interceptor.__GT_interceptor = (function re_frame$interceptor$__GT_interceptor(var_args){\nvar args__5755__auto__ = [];\nvar len__5749__auto___24585 = arguments.length;\nvar i__5750__auto___24586 = (0);\nwhile(true){\nif((i__5750__auto___24586 < len__5749__auto___24585)){\nargs__5755__auto__.push((arguments[i__5750__auto___24586]));\n\nvar G__24587 = (i__5750__auto___24586 + (1));\ni__5750__auto___24586 = G__24587;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5756__auto__ = ((((0) < args__5755__auto__.length))?(new cljs.core.IndexedSeq(args__5755__auto__.slice((0)),(0),null)):null);\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__5756__auto__);\n});\n\n(re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__24538){\nvar map__24539 = p__24538;\nvar map__24539__$1 = cljs.core.__destructure_map(map__24539);\nvar m = map__24539__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24539__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar comment = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24539__$1,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069));\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24539__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24539__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\nif(re_frame.interop.debug_enabled_QMARK_){\nvar temp__5821__auto___24588 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.mandatory_interceptor_keys,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([re_frame.interceptor.optional_interceptor_keys], 0)));\nif(temp__5821__auto___24588){\nvar unknown_keys_24589 = temp__5821__auto___24588;\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor\",m,\"has unknown keys:\",unknown_keys_24589], 0));\n} else {\n}\n} else {\n}\n\nvar G__24540 = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__5025__auto__ = id;\nif(cljs.core.truth_(or__5025__auto__)){\nreturn or__5025__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\n}\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\nif(cljs.core.truth_(comment)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24540,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069),comment);\n} else {\nreturn G__24540;\n}\n}));\n\n(re_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq24537){\nvar self__5735__auto__ = this;\nreturn self__5735__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq24537));\n}));\n\nre_frame.interceptor.get_effect = (function re_frame$interceptor$get_effect(var_args){\nvar G__24542 = arguments.length;\nswitch (G__24542) {\ncase 1:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\n}));\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\n}));\n\n(re_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3);\n\nre_frame.interceptor.assoc_effect = (function re_frame$interceptor$assoc_effect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\n});\nre_frame.interceptor.update_effect = (function re_frame$interceptor$update_effect(var_args){\nvar args__5755__auto__ = [];\nvar len__5749__auto___24593 = arguments.length;\nvar i__5750__auto___24594 = (0);\nwhile(true){\nif((i__5750__auto___24594 < len__5749__auto___24593)){\nargs__5755__auto__.push((arguments[i__5750__auto___24594]));\n\nvar G__24595 = (i__5750__auto___24594 + (1));\ni__5750__auto___24594 = G__24595;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5756__auto__ = ((((3) < args__5755__auto__.length))?(new cljs.core.IndexedSeq(args__5755__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__5756__auto__);\n});\n\n(re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),f,args);\n}));\n\n(re_frame.interceptor.update_effect.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(re_frame.interceptor.update_effect.cljs$lang$applyTo = (function (seq24547){\nvar G__24548 = cljs.core.first(seq24547);\nvar seq24547__$1 = cljs.core.next(seq24547);\nvar G__24549 = cljs.core.first(seq24547__$1);\nvar seq24547__$2 = cljs.core.next(seq24547__$1);\nvar G__24550 = cljs.core.first(seq24547__$2);\nvar seq24547__$3 = cljs.core.next(seq24547__$2);\nvar self__5734__auto__ = this;\nreturn self__5734__auto__.cljs$core$IFn$_invoke$arity$variadic(G__24548,G__24549,G__24550,seq24547__$3);\n}));\n\nre_frame.interceptor.get_coeffect = (function re_frame$interceptor$get_coeffect(var_args){\nvar G__24558 = arguments.length;\nswitch (G__24558) {\ncase 1:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3);\n\nre_frame.interceptor.assoc_coeffect = (function re_frame$interceptor$assoc_coeffect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\n});\nre_frame.interceptor.update_coeffect = (function re_frame$interceptor$update_coeffect(var_args){\nvar args__5755__auto__ = [];\nvar len__5749__auto___24599 = arguments.length;\nvar i__5750__auto___24600 = (0);\nwhile(true){\nif((i__5750__auto___24600 < len__5749__auto___24599)){\nargs__5755__auto__.push((arguments[i__5750__auto___24600]));\n\nvar G__24601 = (i__5750__auto___24600 + (1));\ni__5750__auto___24600 = G__24601;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5756__auto__ = ((((3) < args__5755__auto__.length))?(new cljs.core.IndexedSeq(args__5755__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__5756__auto__);\n});\n\n(re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\n}));\n\n(re_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(re_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq24562){\nvar G__24563 = cljs.core.first(seq24562);\nvar seq24562__$1 = cljs.core.next(seq24562);\nvar G__24564 = cljs.core.first(seq24562__$1);\nvar seq24562__$2 = cljs.core.next(seq24562__$1);\nvar G__24565 = cljs.core.first(seq24562__$2);\nvar seq24562__$3 = cljs.core.next(seq24562__$2);\nvar self__5734__auto__ = this;\nreturn self__5734__auto__.cljs$core$IFn$_invoke$arity$variadic(G__24563,G__24564,G__24565,seq24562__$3);\n}));\n\nre_frame.interceptor.exception__GT_ex_info = (function re_frame$interceptor$exception__GT_ex_info(e,interceptor,direction){\nreturn cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3([\"Interceptor Exception: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.ex_message(e))].join(''),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"direction\",\"direction\",-633359395),direction,new cljs.core.Keyword(null,\"interceptor\",\"interceptor\",1127739076),new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(interceptor)], null),e);\n});\nre_frame.interceptor.invoke_interceptor_fn = (function re_frame$interceptor$invoke_interceptor_fn(p__24571,interceptor,direction){\nvar map__24572 = p__24571;\nvar map__24572__$1 = cljs.core.__destructure_map(map__24572);\nvar context = map__24572__$1;\nvar original_exception_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24572__$1,new cljs.core.Keyword(\"re-frame.interceptor\",\"original-exception?\",\"re-frame.interceptor/original-exception?\",-527923945));\nvar f = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\nif(cljs.core.not(f)){\nreturn context;\n} else {\nif(cljs.core.truth_(original_exception_QMARK_)){\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null,context));\n} else {\ntry{return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null,context));\n}catch (e24573){var e = e24573;\nthrow re_frame.interceptor.exception__GT_ex_info(e,interceptor,direction);\n}\n}\n}\n});\n/**\n * Loop over all interceptors, calling `direction` function on each,\n *   threading the value of `context` through every call.\n * \n *   `direction` is one of `:before` or `:after`.\n * \n *   Each iteration, the next interceptor to process is obtained from\n *   context's `:queue`. After they are processed, interceptors are popped\n *   from `:queue` and added to `:stack`.\n * \n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\n *   contain all interceptors processed.\n * \n *   Returns updated `context`. Ie. the `context` which has been threaded\n *   through all interceptor functions.\n * \n *   Generally speaking, an interceptor's `:before` function will (if present)\n *   add to a `context's` `:coeffects`, while its `:after` function\n *   will modify the `context`'s `:effects`.  Very approximately.\n * \n *   But because all interceptor functions are given `context`, and can\n *   return a modified version of it, the way is clear for an interceptor\n *   to introspect the stack or queue, or even modify the queue\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\n */\nre_frame.interceptor.invoke_interceptors = (function re_frame$interceptor$invoke_interceptors(context,direction){\nvar context__$1 = context;\nwhile(true){\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\nif(cljs.core.empty_QMARK_(queue)){\nreturn context__$1;\n} else {\nvar interceptor = cljs.core.peek(queue);\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\nvar G__24602 = re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\ncontext__$1 = G__24602;\ncontinue;\n}\nbreak;\n}\n});\nre_frame.interceptor.enqueue = (function re_frame$interceptor$enqueue(context,interceptors){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,re_frame.interop.empty_queue),interceptors);\n});\n/**\n * Create a fresh context\n */\nre_frame.interceptor.context = (function re_frame$interceptor$context(var_args){\nvar G__24576 = arguments.length;\nswitch (G__24576) {\ncase 2:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\nreturn re_frame.interceptor.enqueue(re_frame.interceptor.assoc_coeffect(re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403),event),interceptors);\n}));\n\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\nreturn re_frame.interceptor.assoc_coeffect(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\n}));\n\n(re_frame.interceptor.context.cljs$lang$maxFixedArity = 3);\n\n/**\n * Called on completion of `:before` processing, this function prepares/modifies\n * `context` for the backwards sweep of processing in which an interceptor\n * chain's `:after` fns are called.\n * \n *   At this point in processing, the `:queue` is empty and `:stack` holds all\n *   the previously run interceptors. So this function enables the backwards walk\n *   by priming `:queue` with what's currently in `:stack`\n */\nre_frame.interceptor.change_direction = (function re_frame$interceptor$change_direction(context){\nreturn re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\n});\nre_frame.interceptor.execute_STAR_ = (function re_frame$interceptor$execute_STAR_(ctx){\nreturn re_frame.interceptor.invoke_interceptors(re_frame.interceptor.change_direction(re_frame.interceptor.invoke_interceptors(ctx,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\n});\nre_frame.interceptor.merge_ex_data = (function re_frame$interceptor$merge_ex_data(var_args){\nvar args__5755__auto__ = [];\nvar len__5749__auto___24604 = arguments.length;\nvar i__5750__auto___24605 = (0);\nwhile(true){\nif((i__5750__auto___24605 < len__5749__auto___24604)){\nargs__5755__auto__.push((arguments[i__5750__auto___24605]));\n\nvar G__24606 = (i__5750__auto___24605 + (1));\ni__5750__auto___24605 = G__24606;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5756__auto__ = ((((1) < args__5755__auto__.length))?(new cljs.core.IndexedSeq(args__5755__auto__.slice((1)),(0),null)):null);\nreturn re_frame.interceptor.merge_ex_data.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5756__auto__);\n});\n\n(re_frame.interceptor.merge_ex_data.cljs$core$IFn$_invoke$arity$variadic = (function (e,ms){\nreturn cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(cljs.core.ex_message(e),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.merge,cljs.core.ex_data(e),ms),cljs.core.ex_cause(e));\n}));\n\n(re_frame.interceptor.merge_ex_data.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(re_frame.interceptor.merge_ex_data.cljs$lang$applyTo = (function (seq24577){\nvar G__24578 = cljs.core.first(seq24577);\nvar seq24577__$1 = cljs.core.next(seq24577);\nvar self__5734__auto__ = this;\nreturn self__5734__auto__.cljs$core$IFn$_invoke$arity$variadic(G__24578,seq24577__$1);\n}));\n\nre_frame.interceptor.default_error_handler = (function re_frame$interceptor$default_error_handler(original_error,re_frame_error){\nvar map__24580 = cljs.core.ex_data(re_frame_error);\nvar map__24580__$1 = cljs.core.__destructure_map(map__24580);\nvar event_v = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24580__$1,new cljs.core.Keyword(null,\"event-v\",\"event-v\",1378681365));\nvar direction = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24580__$1,new cljs.core.Keyword(null,\"direction\",\"direction\",-633359395));\nvar interceptor = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24580__$1,new cljs.core.Keyword(null,\"interceptor\",\"interceptor\",1127739076));\nvar event_handler_QMARK_ = (function (){var fexpr__24581 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"fx-handler\",\"fx-handler\",-549783097),null,new cljs.core.Keyword(null,\"db-handler\",\"db-handler\",579530098),null,new cljs.core.Keyword(null,\"ctx-handler\",\"ctx-handler\",-1777672230),null], null), null);\nreturn (fexpr__24581.cljs$core$IFn$_invoke$arity$1 ? fexpr__24581.cljs$core$IFn$_invoke$arity$1(interceptor) : fexpr__24581.call(null,interceptor));\n})();\ncljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(re_frame.loggers.console,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"An error occured while handling the re-frame event:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(event_v),\"\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.str,(cljs.core.truth_(event_handler_QMARK_)?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Within the\",cljs.core.first(event_v),\"event handler function.\"], null):new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Within the\",direction,\"phase of the\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([interceptor], 0)),\"interceptor.\"], null)))], 0));\n\nthrow original_error;\n});\n/**\n * Executes the given chain (coll) of interceptors.\n * \n * Each interceptor has this form:\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\n * \n * Walks the queue of interceptors from beginning to end, calling the\n * `:before` fn on each, then reverse direction and walk backwards,\n * calling the `:after` fn on each.\n * \n * The last interceptor in the chain presumably wraps an event\n * handler fn. So the overall goal of the process is to \"handle\n * the given event\".\n * \n * Thread a `context` through all calls. `context` has this form:\n * \n *   {:coeffects {:event [:a-query-id :some-param]\n *                :db    <original contents of app-db>}\n *    :effects   {:db    <new value for app-db>\n *                :fx  [:dispatch [:an-event-id :param1]]}\n *    :queue     <a collection of further interceptors>\n *    :stack     <a collection of interceptors already walked>}\n * \n * `context` has `:coeffects` and `:effects` which, if this was a web\n * server, would be somewhat analogous to `request` and `response`\n * respectively.\n * \n * `coeffects` will contain data like `event` and the initial\n * state of `db` -  the inputs required by the event handler\n * (sitting presumably on the end of the chain), while handler-returned\n * side effects are put into `:effects` including, but not limited to,\n * new values for `db`.\n * \n * The first few interceptors in a chain will likely have `:before`\n * functions which \"prime\" the `context` by adding the event, and\n * the current state of app-db into `:coeffects`. But interceptors can\n * add whatever they want to `:coeffects` - perhaps the event handler needs\n * some information from localstore, or a random number, or access to\n * a DataScript connection.\n * \n * Equally, some interceptors in the chain will have `:after` fn\n * which can process the side effects accumulated into `:effects`\n * including but, not limited to, updates to app-db.\n * \n * Through both stages (before and after), `context` contains a `:queue`\n * of interceptors yet to be processed, and a `:stack` of interceptors\n * already done.  In advanced cases, these values can be modified by the\n * functions through which the context is threaded.\n */\nre_frame.interceptor.execute = (function re_frame$interceptor$execute(event_v,interceptors){\nvar ctx = re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors);\nvar error_handler = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),new cljs.core.Keyword(null,\"event-handler\",\"event-handler\",-487718843));\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__24412__auto___24607 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__24412__auto___24607);\n\n} else {\n}\n\nif(cljs.core.not(error_handler)){\nreturn re_frame.interceptor.execute_STAR_(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ctx,new cljs.core.Keyword(\"re-frame.interceptor\",\"original-exception?\",\"re-frame.interceptor/original-exception?\",-527923945),true));\n} else {\ntry{return re_frame.interceptor.execute_STAR_(ctx);\n}catch (e24582){var e = e24582;\nvar G__24583 = cljs.core.ex_cause(e);\nvar G__24584 = re_frame.interceptor.merge_ex_data.cljs$core$IFn$_invoke$arity$variadic(e,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"event-v\",\"event-v\",1378681365),event_v], null)], 0));\nreturn (error_handler.cljs$core$IFn$_invoke$arity$2 ? error_handler.cljs$core$IFn$_invoke$arity$2(G__24583,G__24584) : error_handler.call(null,G__24583,G__24584));\n}}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/interceptor.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$shadow.js.shim.module$react"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^N","~$set","~$clojure.set","~$u","~$re-frame.utils","~$re-frame.trace","^R","~$re-frame.registrar","^S","~$cljs.core","^T","~$goog","^U","~$registrar","^S","~$trace","^R","^Q","^Q","^P","^P","~$re-frame.loggers","^X"],"~:seen",["^F",["~:require"]],"~:uses",["^ ","~$console","^X","~$empty-queue","^N","~$debug-enabled?","^N"],"~:require-macros",["^ ","^R","^R","^W","^R","^T","^T"],"~:form",["~#list",["~$ns","^H",["^15",["^Z",["^X","~:refer",["^10"]],["^N","^17",["^11","^12"]],["^R","~:as","^W","~:include-macros",true],["^S","^18","^V"],["^Q","^18","~$u"],["^P","^18","^O"]]]]],"~:flags",["^ ","^Z",["^F",[]]],"~:js-deps",[],"~:deps",["^U","^T","^X","^N","^R","^S","^Q","^P"]],"^K","^H","~:resource-id",["~:shadow.build.classpath/resource","re_frame/interceptor.cljc"],"~:compiled-at",1759342953954,"^I",["^ ","^N","^N","^O","^P","~$u","^Q","^R","^R","^S","^S","^T","^T","^U","^U","^V","^S","^W","^R","^Q","^Q","^P","^P","^X","^X"],"~:resource-name","re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns re-frame.interceptor\n  (:require\n   [re-frame.loggers :refer [console]]\n   [re-frame.interop :refer [empty-queue debug-enabled?]]\n   [re-frame.trace :as trace :include-macros true]\n   [re-frame.registrar :as registrar]\n   [re-frame.utils :as u]\n   [clojure.set :as set]))\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(def optional-interceptor-keys #{:comment})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys\n          (-> m keys set (set/difference optional-interceptor-keys)))))\n\n(defn ->interceptor\n  [& {:as m :keys [id comment before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys\n                                optional-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  (cond-> {:id     (or id :unnamed)\n           :before before\n           :after  after}\n    comment (assoc :comment comment)))\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n(defn update-effect\n  [context key f & args]\n  (apply update-in context [:effects key] f args))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n(defn- exception->ex-info [e interceptor direction]\n  (ex-info (str \"Interceptor Exception: \" #?(:clj (.getMessage e) :cljs (ex-message e)))\n           {:direction direction\n            :interceptor (:id interceptor)}\n           e))\n\n(defn- invoke-interceptor-fn\n  [{::keys [original-exception?] :as context} interceptor direction]\n  (let [f (get interceptor direction)]\n    (cond\n      (not f) context\n      original-exception? (f context)\n      :else\n      (try\n        (f context)\n        (catch #?(:clj Exception :cljs :default) e\n          (throw (exception->ex-info e interceptor direction)))))))\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n(defn enqueue\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n   (-> {}\n       (assoc-coeffect :event event)\n      ;; Some interceptors, like `trim-v` and `unwrap`, alter event so capture\n      ;; the original for use cases such as tracing.\n       (assoc-coeffect :original-event event)\n       (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n(defn execute*\n  [ctx]\n  (-> ctx\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n\n(defn- merge-ex-data [e & ms]\n  (ex-info #?(:clj (.getMessage e) :cljs (ex-message e))\n           (apply merge (ex-data e) ms)\n           #?(:clj (.getCause e) :cljs (ex-cause e))))\n\n(defn default-error-handler [original-error re-frame-error]\n  (let [{:keys [event-v direction interceptor]} (ex-data re-frame-error)\n        event-handler? (#{:db-handler :fx-handler :ctx-handler} interceptor)]\n    (apply console :error\n           \"An error occured while handling the re-frame event:\"\n           (str event-v)\n           \"\\n\"\n           (map str\n                (if event-handler?\n                  [\"Within the\" (first event-v) \"event handler function.\"]\n                  [\"Within the\" direction \"phase of the\" (pr-str interceptor) \"interceptor.\"])))\n    (throw original-error)))\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :fx  [:dispatch [:an-event-id :param1]]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (let [ctx (context event-v interceptors)\n        error-handler (registrar/get-handler :error :event-handler)]\n    (trace/merge-trace!\n     {:tags {:interceptors interceptors}})\n    (if-not error-handler\n      (execute* (assoc ctx ::original-exception? true))\n      (try\n        (execute* ctx)\n        (catch #?(:clj Exception :cljs :default) e\n          (error-handler (ex-cause e)\n                         (merge-ex-data e {:event-v event-v})))))))\n","~:reader-features",["^F",["~:cljs"]],"~:used-var-namespaces",["^F",["^N","^H","^R","^S","^T","~$js","^P","^X"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.interceptor/mandatory-interceptor-keys","re-frame.interceptor/optional-interceptor-keys","re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_","cljs.core/keys","cljs.core/set","clojure.set.difference","var_args","args__5755__auto__","len__5749__auto__","i__5750__auto__","argseq__5756__auto__","cljs.core/IndexedSeq","re-frame.interceptor/->interceptor","p__24538","map__24539","cljs.core/--destructure-map","cljs.core.get","seq24537","self__5735__auto__","cljs.core/seq","id","comment","before","after","re-frame.interop/debug-enabled?","temp__5821__auto__","unknown-keys","re_frame.loggers.console","G__24540","or__5025__auto__","cljs.core.assoc","G__24542","re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in","not-found","re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","re-frame.interceptor/update-effect","seq24547","G__24548","cljs.core/first","cljs.core/next","G__24549","G__24550","self__5734__auto__","f","args","cljs.core.apply","cljs.core/update-in","G__24558","re-frame.interceptor/get-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.interceptor/update-coeffect","seq24562","G__24563","G__24564","G__24565","re-frame.interceptor/exception->ex-info","e","interceptor","direction","cljs.core.ex_info","cljs.core/ex-message","p__24571","map__24572","re-frame.interceptor/invoke-interceptor-fn","original-exception?","cljs.core/not","e24573","re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core/pop","cljs.core.conj","re-frame.interceptor/enqueue","interceptors","cljs.core.update","cljs.core.fnil","cljs.core/into","re-frame.interop/empty-queue","G__24576","re-frame.interceptor/context","event","db","re_frame.interceptor.context","re-frame.interceptor/change-direction","cljs.core.dissoc","re-frame.interceptor/execute*","ctx","re-frame.interceptor/merge-ex-data","seq24577","G__24578","ms","cljs.core/merge","cljs.core/ex-data","cljs.core/ex-cause","re-frame.interceptor/default-error-handler","original-error","re-frame-error","map__24580","event-v","event-handler?","fexpr__24581","re-frame.loggers/console","cljs.core.map","cljs.core/str","cljs.core.pr_str","re-frame.interceptor/execute","error-handler","re_frame.registrar.get_handler","re-frame.trace/is-trace-enabled?","new-trace__24412__auto__","cljs.core.merge","re-frame.trace/*current-trace*","e24582","G__24583","G__24584","re_frame.interceptor.merge_ex_data"]],"~:used-vars",["^F",["~$cljs.core/--destructure-map","~$re-frame.interceptor/context","~$re-frame.interceptor/get-effect","~$cljs.core/str","~$cljs.core/ex-message","~$re-frame.registrar/get-handler","~$cljs.core/=","~$cljs.core/keys","~$re-frame.interceptor/execute","~$cljs.core/IndexedSeq","~$re-frame.interceptor/->interceptor","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.loggers/console","~$cljs.core/dissoc","~$re-frame.interceptor/exception->ex-info","~$re-frame.interceptor/update-effect","~$cljs.core/pop","~$cljs.core/pr-str","~$re-frame.interceptor/invoke-interceptors","~$cljs.core/set","~$cljs.core/empty?","~$re-frame.interceptor/enqueue","~$cljs.core/fnil","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/update","~$cljs.core/peek","~$cljs.core/map","~$re-frame.interceptor/default-error-handler","~$cljs.core/get-in","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$cljs.core/get","~$re-frame.interceptor/assoc-coeffect","~$clojure.set/difference","~$re-frame.interceptor/optional-interceptor-keys","~$re-frame.interceptor/change-direction","~$cljs.core/ex-cause","~$cljs.core/ex-info","~$re-frame.trace/*current-trace*","~$re-frame.interceptor/merge-ex-data","~$cljs.core/next","~$re-frame.interceptor/get-coeffect","~$re-frame.interop/empty-queue","~$cljs.core/not","~$re-frame.interceptor/assoc-effect","~$re-frame.interceptor/interceptor?","~$re-frame.interceptor/execute*","~$cljs.core/assoc","~$cljs.core/assoc-in","~$cljs.core/ex-data","~$cljs.core/first","~$re-frame.interop/debug-enabled?","~$cljs.core/merge","~$cljs.core/update-in","~$re-frame.interceptor/invoke-interceptor-fn","~$js/Error","~$re-frame.interceptor/mandatory-interceptor-keys"]]],"~:cache-keys",["~#cmap",[["^1>","reagent/impl/batching.cljs"],["4caaa52545ee26bd20d35e6e27879b12ea4f9c3f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["^U","^T","~$reagent.debug","~$reagent.impl.util"]]],["^1>","goog/dom/tagname.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","~$goog.dom.HtmlElement"]]],["^1>","goog/labs/useragent/platform.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1>","goog/math/math.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","~$goog.asserts"]]],["^1>","goog/html/trustedtypes.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","goog/events/eventtype.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","~$goog.events.eventTypeHelpers","~$goog.userAgent"]]],["^1>","goog/labs/useragent/browser.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3:","^3;","~$goog.labs.userAgent.chromiumRebrands","^3>","^39","^3<","^3="]]],["^1>","goog/html/safeurl.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3>","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^39"]]],["^1>","re_frame/loggers.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^T","^P"]]],["^1>","goog/array/array.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3>"]]],["^1>","reagent/impl/util.cljs"],["4caaa52545ee26bd20d35e6e27879b12ea4f9c3f","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^T","~$clojure.string","~$clojure.walk","~$goog.object","^36"]]],["^1>","goog/useragent/useragent.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3:","~$goog.reflect","^39"]]],["^1>","goog/debug/error.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","goog/flags/flags.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","goog/events/events.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3>","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","~$goog.events.BrowserFeature","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1>","re_frame/registrar.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^T","^N","^X","~$re-frame.settings"]]],["^1>","goog/events/browserfeature.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","goog/dom/nodetype.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","goog/labs/useragent/highentropy/highentropyvalue.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3:","^39"]]],["^1>","reagent/ratom.cljs"],["4caaa52545ee26bd20d35e6e27879b12ea4f9c3f","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^T","^37","^36","~$reagent.impl.batching","^P","^3H"]]],["^1>","re_frame/interop.cljs"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^T","~$goog.async.nextTick","~$goog.events","~$reagent.core","~$reagent.ratom"]]],["^1>","goog/disposable/disposable.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1>","goog/string/typedstring.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","shadow/js.js"],["285a271cb9a1944c5905eb8f7feb18f53fb4d633","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","goog/object/object.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","reagent/impl/template.cljs"],["4caaa52545ee26bd20d35e6e27879b12ea4f9c3f","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^T","^C","^3F","^37","~$reagent.impl.component","~$reagent.impl.input","~$reagent.impl.protocols","^3W","^36","^3H"]]],["^1>","goog/dom/asserts.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3>"]]],"~:SHADOW-TIMESTAMP",[1759342938000,1759342938000,1759039018000],["^1>","goog/math/long.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3>","^3L"]]],["^1>","goog/events/listener.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","~$goog.events.ListenableKey"]]],["^1>","goog/html/trustedresourceurl.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3>","~$goog.fs.blob","^3B","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3D","^3E"]]],["^1>","goog/events/listenermap.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","~$goog.array","~$goog.events.Listener","^3H"]]],["^1>","goog/events/eventid.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","goog/string/internal.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","goog/functions/functions.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","goog/html/safestyle.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3D","~$goog.html.SafeUrl","^3E","^3>","^39"]]],["^1>","goog/dom/safe.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3>","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^45","~$goog.html.SafeStyle","^49","^3C","~$goog.html.uncheckedconversions","^3D","^39"]]],["^1>","goog/asserts/dom.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","~$goog.dom.TagName","^3>","~$goog.dom.element"]]],["^1>","reagent/impl/component.cljs"],["4caaa52545ee26bd20d35e6e27879b12ea4f9c3f","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^T","^3H","^C","^37","^3S","^41","^3W","^36"]]],["^1>","clojure/walk.cljs"],["29b0d50db86dc25d9e60d7c39586a3f5dfbf4c5b","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^T"]]],["^1>","goog/html/safehtml.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3D","^45","^4>","~$goog.html.SafeStyleSheet","^49","^4@","^3C","^3E","^3>","^3I","^47","^3H","^39","~$goog.dom.tags","^46"]]],["^1>","goog/dom/tags.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3H"]]],["^1>","goog/math/size.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","goog/labs/useragent/engine.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^47","^39","^3:"]]],["^1>","goog/fs/blob.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","re_frame/settings.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^T","^N","^X"]]],["^1>","goog/dom/dom.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^47","^3>","^4:","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4@","~$goog.dom.safe","^4=","^4?","~$goog.math.Coordinate","~$goog.math.Size","^3H","~$goog.string","^3D","~$goog.string.Unicode","^3@"]]],["^1>","goog/asserts/asserts.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","~$goog.debug.Error","^4E"]]],["^1>","reagent/impl/protocols.cljs"],["4caaa52545ee26bd20d35e6e27879b12ea4f9c3f","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^T"]]],["^1>","goog/uri/uri.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^47","^3>","~$goog.collections.maps","^4I","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1>","goog/labs/useragent/highentropy/highentropydata.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3;"]]],["^1>","goog/collections/maps.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","goog/events/eventtypehelpers.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3O","^3@"]]],["^1>","goog/disposable/idisposable.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","goog/fs/url.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","goog/base.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",[]]],["^1>","goog/structs/structs.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^47","^3H"]]],["^1>","goog/disposable/dispose.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","clojure/string.cljs"],["29b0d50db86dc25d9e60d7c39586a3f5dfbf4c5b","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^T","^4I","~$goog.string.StringBuffer"]]],["~:shadow.build.js-support/require","react"],["^C","shadow.js.shim.module$react.js","shadow$bridge","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","~$shadow.js"]]],["^1>","goog/debug/entrypointregistry.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3>"]]],["^1>","goog/string/string.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^4F","^4?","^3D","^39"]]],["^1>","re_frame/interceptor.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^T","^X","^N","^R","^S","^Q","^P"]]],["^1>","goog/reflect/reflect.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","goog/labs/useragent/util.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^39","^3="]]],["^1>","reagent/core.cljs"],["4caaa52545ee26bd20d35e6e27879b12ea4f9c3f","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^T","^C","~$reagent.impl.template","^3[","^37","^3S","^41","^3W","^36"]]],["^1>","goog/debug/debug.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^47","~$goog.debug.errorcontext"]]],["^1>","goog/string/stringbuffer.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","goog/math/coordinate.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","~$goog.math"]]],["^1>","goog/debug/errorcontext.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","goog/labs/useragent/chromium_rebrands.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","goog/labs/useragent/useragent.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","~$goog.flags"]]],["^1>","goog/async/nexttick.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3M","~$goog.dom","^4@","^4<","^3I","^3J"]]],["^1>","goog/dom/element.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^4E","^4@"]]],["^1>","goog/html/uncheckedconversions.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3>","^4=","^45","^4>","^4B","^49","^3C","^3D","^39"]]],["^1>","re_frame/utils.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^T","^X","^N"]]],["^1>","reagent/impl/input.cljs"],["4caaa52545ee26bd20d35e6e27879b12ea4f9c3f","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^T","^3[","^3S","^41"]]],["^1>","goog/events/event.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","~$goog.Disposable","~$goog.events.EventId"]]],["^1>","goog/dom/htmlelement.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","cljs/core.cljs"],["29b0d50db86dc25d9e60d7c39586a3f5dfbf4c5b","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","~$goog.math.Long","~$goog.math.Integer","^4I","^3H","^47","~$goog.Uri","^4Q"]]],["^1>","goog/html/safescript.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3D","^3E","^46","^3>"]]],["^1>","reagent/debug.cljs"],["4caaa52545ee26bd20d35e6e27879b12ea4f9c3f","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^T"]]],["^1>","goog/html/safestylesheet.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3D","^4>","^3E","^3H","^3>","^39"]]],["^1>","goog/events/browserevent.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","~$goog.debug","~$goog.events.Event","~$goog.events.EventType","^3L","^3@"]]],["^1>","goog/math/integer.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3L"]]],["^1>","goog/dom/browserfeature.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3@"]]],["^1>","clojure/set.cljs"],["29b0d50db86dc25d9e60d7c39586a3f5dfbf4c5b","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^T"]]],["^1>","goog/uri/utils.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3>","^4I"]]],["^1>","goog/string/const.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3>","^3E"]]],["^1>","goog/disposable/disposeall.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^3Y"]]],["^1>","goog/events/listenable.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","goog/events/listenablekey.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U"]]],["^1>","re_frame/trace.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^32",["^ ","^33",null,"^34",["^F",[]],"^35",["^U","^T","^N","^X","^4<"]]]]],"~:clj-info",["^ ","jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/analyzer/impl.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/analyzer.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/js_deps.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1759039024000,"jar:file:/Users/paul/.m2/repository/reagent/reagent/2.0.0-alpha2/reagent-2.0.0-alpha2.jar!/reagent/core.clj",1759039024000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/java/io.clj",1759038789000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/core.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/tagged_literals.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/vendor/clojure/data/json.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/compiler.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/instant.clj",1759038789000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/analyzer/impl/namespaces.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/source_map/base64.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/pprint.clj",1759038789000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/vendor/clojure/tools/reader.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/instant.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/reagent/reagent/2.0.0-alpha2/reagent-2.0.0-alpha2.jar!/reagent/ratom.clj",1759039024000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/util.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1759039023000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/core.clj",1759038789000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/set.clj",1759038789000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/string.clj",1759038789000,"jar:file:/Users/paul/.m2/repository/re-frame/re-frame/1.4.3/re-frame-1.4.3.jar!/re_frame/trace.cljc",1759039024000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/re-frame/re-frame/1.4.3/re-frame-1.4.3.jar!/re_frame/interop.clj",1759039024000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/source_map.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/env.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/analyzer/passes/and_or.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/source_map/base64_vlq.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/reagent/reagent/2.0.0-alpha2/reagent-2.0.0-alpha2.jar!/reagent/debug.clj",1759039024000,"jar:file:/Users/paul/.m2/repository/reagent/reagent/2.0.0-alpha2/reagent-2.0.0-alpha2.jar!/reagent/interop.clj",1759039024000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/analyzer/passes.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/externs.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/edn.clj",1759038789000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/interceptor.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^I",["^ "],"^L",null,"^M",["^ ","^N","^N","^O","^P","~$u","^Q","^R","^R","^S","^S","^T","^T","^U","^U","^V","^S","^W","^R","^Q","^Q","^P","^P","^X","^X"],"^Y",["^F",["^Z"]],"~:shadow/js-access-global",["^F",["Error"]],"^[",["^ ","^10","^X","^11","^N","^12","^N"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",47,"^8",7,"^9",47,"^:",20,"~:arglists",["^15",["~$quote",["^15",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^15",["^66","^67","~$f","^68"]]],"^64",["^15",[["^66","^67","~$f","~$&","^68"]]],"~:arglists-meta",["^15",[null]]]],"^G","^20","^6","re_frame/interceptor.cljc","^:",20,"^69",["^ ","^6:",true,"^6;",3,"^6<",3,"^6=",[["^15",["^66","^67","~$f","^68"]]],"^64",["^15",[["^66","^67","~$f","~$&","^68"]]],"^6>",["^15",[null]]],"^6=",[["^15",["^66","^67","~$f","^68"]]],"~:protocol-impl",null,"^6;",3,"^6>",["^15",[null]],"^8",1,"^6:",true,"~:methods",[["^ ","^6;",3,"^6:",true,"~:tag","~$any"]],"^7",47,"~:ret-tag","^6B","^9",47,"^6<",3,"~:fn-var",true,"^64",["^15",[["^66","^67","~$f","~$&","^68"]]]],"~$invoke-interceptors",["^ ","^63",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",89,"^8",8,"^9",89,"^:",27,"~:private",true,"^64",["^15",["^65",["^15",[["^66","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^6F",true,"^G","^23","^6","re_frame/interceptor.cljc","^:",27,"^6=",["^15",[["^66","^6G"]]],"^6?",null,"^6>",["^15",[null,null]],"^8",1,"^6:",false,"^7",89,"^9",89,"^6<",2,"^6D",true,"^64",["^15",["^65",["^15",[["^66","^6G"]]]]],"^6H","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^63",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",61,"^8",7,"^9",61,"^:",21,"^64",["^15",["^65",["^15",[["^66","^67","~$value"]]]]]],"^G","^2C","^6","re_frame/interceptor.cljc","^:",21,"^6=",["^15",[["^66","^67","^6J"]]],"^6?",null,"^6>",["^15",[null,null]],"^8",1,"^6:",false,"^7",61,"^6C",["^F",["~$clj","^6B"]],"^9",61,"^6<",3,"^6D",true,"^64",["^15",["^65",["^15",[["^66","^67","^6J"]]]]]],"~$exception->ex-info",["^ ","^63",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",71,"^8",8,"^9",71,"^:",26,"^6F",true,"^64",["^15",["^65",["^15",[["~$e","~$interceptor","^6G"]]]]]],"^6F",true,"^G","^1[","^6","re_frame/interceptor.cljc","^:",26,"^6=",["^15",[["~$e","^6M","^6G"]]],"^6?",null,"^6>",["^15",[null,null]],"^8",1,"^6:",false,"^7",71,"^6C","~$cljs.core/ExceptionInfo","^9",71,"^6<",3,"^6D",true,"^64",["^15",["^65",["^15",[["~$e","^6M","^6G"]]]]]],"~$update-coeffect",["^ ","^63",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",65,"^8",7,"^9",65,"^:",22,"^64",["^15",["^65",["^15",[["^66","^67","~$f","~$&","^68"]]]]],"^69",["^ ","^6:",true,"^6;",3,"^6<",3,"^6=",[["^15",["^66","^67","~$f","^68"]]],"^64",["^15",[["^66","^67","~$f","~$&","^68"]]],"^6>",["^15",[null]]]],"^G","^2@","^6","re_frame/interceptor.cljc","^:",22,"^69",["^ ","^6:",true,"^6;",3,"^6<",3,"^6=",[["^15",["^66","^67","~$f","^68"]]],"^64",["^15",[["^66","^67","~$f","~$&","^68"]]],"^6>",["^15",[null]]],"^6=",[["^15",["^66","^67","~$f","^68"]]],"^6?",null,"^6;",3,"^6>",["^15",[null]],"^8",1,"^6:",true,"^6@",[["^ ","^6;",3,"^6:",true,"^6A","^6B"]],"^7",65,"^6C","^6B","^9",65,"^6<",3,"^6D",true,"^64",["^15",[["^66","^67","~$f","~$&","^68"]]]],"~$invoke-interceptor-fn",["^ ","^63",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",77,"^8",8,"^9",77,"^:",29,"^6F",true,"^64",["^15",["^65",["^15",[[["^ ","~:re-frame.interceptor/keys",["~$original-exception?"],"^18","^66"],"^6M","^6G"]]]]]],"^6F",true,"^G","^2Y","^6","re_frame/interceptor.cljc","^:",29,"^6=",["^15",[["~$p__24571","^6M","^6G"]]],"^6?",null,"^6>",["^15",[null,null]],"^8",1,"^6:",false,"^7",77,"^6C",["^F",[null,"^6B","~$clj-nil"]],"^9",77,"^6<",3,"^6D",true,"^64",["^15",["^65",["^15",[[["^ ","^6Q",["^6R"],"^18","^66"],"^6M","^6G"]]]]]],"~$get-effect",["^ ","^63",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",35,"^8",7,"^9",35,"^:",17,"^64",["^15",["^65",["^15",[["^66"],["^66","^67"],["^66","^67","~$not-found"]]]]],"^69",["^ ","^6:",false,"^6;",3,"^6<",3,"^6=",[["^66"],["^66","^67"],["^66","^67","^6V"]],"^64",["^15",[["^66"],["^66","^67"],["^66","^67","^6V"]]],"^6>",["^15",[null,null,null]]]],"^G","^1N","^6","re_frame/interceptor.cljc","^:",17,"^69",["^ ","^6:",false,"^6;",3,"^6<",3,"^6=",[["^66"],["^66","^67"],["^66","^67","^6V"]],"^64",["^15",[["^66"],["^66","^67"],["^66","^67","^6V"]]],"^6>",["^15",[null,null,null]]],"^6=",[["^66"],["^66","^67"],["^66","^67","^6V"]],"^6?",null,"^6;",3,"^6>",["^15",[null,null,null]],"^8",1,"^6:",false,"^6@",[["^ ","^6;",1,"^6:",false,"^6A","^6B"],["^ ","^6;",2,"^6:",false,"^6A","^6B"],["^ ","^6;",3,"^6:",false,"^6A",["^F",[null,"^6B"]]]],"^7",35,"^9",35,"^6<",3,"^6D",true,"^64",["^15",[["^66"],["^66","^67"],["^66","^67","^6V"]]]],"~$->interceptor",["^ ","^63",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",20,"^8",7,"^9",20,"^:",20,"^64",["^15",["^65",["^15",[["~$&",["^ ","^18","~$m","~:keys",["~$id","~$comment","~$before","~$after"]]]]]]],"^69",["^ ","^6:",true,"^6;",0,"^6<",0,"^6=",[["^15",[["^ ","^18","~$m","^6X",["^6Y","^6Z","^6[","^70"]]]]],"^64",["^15",[["~$&",["^ ","^18","~$m","^6X",["^6Y","^6Z","^6[","^70"]]]]],"^6>",["^15",[null]]]],"^G","^1V","^6","re_frame/interceptor.cljc","^:",20,"^69",["^ ","^6:",true,"^6;",0,"^6<",0,"^6=",[["^15",[["^ ","^18","~$m","^6X",["^6Y","^6Z","^6[","^70"]]]]],"^64",["^15",[["~$&",["^ ","^18","~$m","^6X",["^6Y","^6Z","^6[","^70"]]]]],"^6>",["^15",[null]]],"^6=",[["^15",[["^ ","^18","~$m","^6X",["^6Y","^6Z","^6[","^70"]]]]],"^6?",null,"^6;",0,"^6>",["^15",[null]],"^8",1,"^6:",true,"^6@",[["^ ","^6;",0,"^6:",true,"^6A",["^F",["^6K","^6B","~$cljs.core/IMap"]]]],"^7",20,"^6C","^6B","^9",20,"^6<",0,"^6D",true,"^64",["^15",[["~$&",["^ ","^18","~$m","^6X",["^6Y","^6Z","^6[","^70"]]]]]],"~$merge-ex-data",["^ ","^63",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",164,"^8",8,"^9",164,"^:",21,"^6F",true,"^64",["^15",["^65",["^15",[["~$e","~$&","~$ms"]]]]],"^69",["^ ","^6:",true,"^6;",1,"^6<",1,"^6=",[["^15",["~$e","^73"]]],"^64",["^15",[["~$e","~$&","^73"]]],"^6>",["^15",[null]]]],"^6F",true,"^G","^2J","^6","re_frame/interceptor.cljc","^:",21,"^69",["^ ","^6:",true,"^6;",1,"^6<",1,"^6=",[["^15",["~$e","^73"]]],"^64",["^15",[["~$e","~$&","^73"]]],"^6>",["^15",[null]]],"^6=",[["^15",["~$e","^73"]]],"^6?",null,"^6;",1,"^6>",["^15",[null]],"^8",1,"^6:",true,"^6@",[["^ ","^6;",1,"^6:",true,"^6A","^6N"]],"^7",164,"^6C","^6B","^9",164,"^6<",1,"^6D",true,"^64",["^15",[["~$e","~$&","^73"]]]],"~$execute*",["^ ","^63",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",157,"^8",7,"^9",157,"^:",15,"^64",["^15",["^65",["^15",[["~$ctx"]]]]]],"^G","^2Q","^6","re_frame/interceptor.cljc","^:",15,"^6=",["^15",[["^75"]]],"^6?",null,"^6>",["^15",[null,null]],"^8",1,"^6:",false,"^7",157,"^6C","^6B","^9",157,"^6<",1,"^6D",true,"^64",["^15",["^65",["^15",[["^75"]]]]]],"~$get-coeffect",["^ ","^63",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",53,"^8",7,"^9",53,"^:",19,"^64",["^15",["^65",["^15",[["^66"],["^66","^67"],["^66","^67","^6V"]]]]],"^69",["^ ","^6:",false,"^6;",3,"^6<",3,"^6=",[["^66"],["^66","^67"],["^66","^67","^6V"]],"^64",["^15",[["^66"],["^66","^67"],["^66","^67","^6V"]]],"^6>",["^15",[null,null,null]]]],"^G","^2L","^6","re_frame/interceptor.cljc","^:",19,"^69",["^ ","^6:",false,"^6;",3,"^6<",3,"^6=",[["^66"],["^66","^67"],["^66","^67","^6V"]],"^64",["^15",[["^66"],["^66","^67"],["^66","^67","^6V"]]],"^6>",["^15",[null,null,null]]],"^6=",[["^66"],["^66","^67"],["^66","^67","^6V"]],"^6?",null,"^6;",3,"^6>",["^15",[null,null,null]],"^8",1,"^6:",false,"^6@",[["^ ","^6;",1,"^6:",false,"^6A","^6B"],["^ ","^6;",2,"^6:",false,"^6A","^6B"],["^ ","^6;",3,"^6:",false,"^6A",["^F",[null,"^6B"]]]],"^7",53,"^9",53,"^6<",3,"^6D",true,"^64",["^15",[["^66"],["^66","^67"],["^66","^67","^6V"]]]],"~$execute",["^ ","^63",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",182,"^8",7,"^9",182,"^:",14,"^64",["^15",["^65",["^15",[["~$event-v","~$interceptors"]]]]],"^6H","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :fx  [:dispatch [:an-event-id :param1]]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^G","^1T","^6","re_frame/interceptor.cljc","^:",14,"^6=",["^15",[["^78","^79"]]],"^6?",null,"^6>",["^15",[null,null]],"^8",1,"^6:",false,"^7",182,"^6C",["^F",[null,"^6B"]],"^9",182,"^6<",2,"^6D",true,"^64",["^15",["^65",["^15",[["^78","^79"]]]]],"^6H","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :fx  [:dispatch [:an-event-id :param1]]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^63",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",43,"^8",7,"^9",43,"^:",19,"^64",["^15",["^65",["^15",[["^66","^67","^6J"]]]]]],"^G","^2O","^6","re_frame/interceptor.cljc","^:",19,"^6=",["^15",[["^66","^67","^6J"]]],"^6?",null,"^6>",["^15",[null,null]],"^8",1,"^6:",false,"^7",43,"^6C",["^F",["^6K","^6B"]],"^9",43,"^6<",3,"^6D",true,"^64",["^15",["^65",["^15",[["^66","^67","^6J"]]]]]],"~$enqueue",["^ ","^63",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",125,"^8",7,"^9",125,"^:",14,"^64",["^15",["^65",["^15",[["^66","^79"]]]]]],"^G","^26","^6","re_frame/interceptor.cljc","^:",14,"^6=",["^15",[["^66","^79"]]],"^6?",null,"^6>",["^15",[null,null]],"^8",1,"^6:",false,"^7",125,"^6C",["^F",["^6K","^6B"]],"^9",125,"^6<",2,"^6D",true,"^64",["^15",["^65",["^15",[["^66","^79"]]]]]],"~$mandatory-interceptor-keys",["^ ","^G","^2[","^6","re_frame/interceptor.cljc","^7",10,"^8",1,"^9",10,"^:",32,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",10,"^8",6,"^9",10,"^:",32],"^6A","~$cljs.core/ISet"],"~$interceptor?",["^ ","^63",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",14,"^8",7,"^9",14,"^:",19,"^64",["^15",["^65",["^15",[["~$m"]]]]]],"^G","^2P","^6","re_frame/interceptor.cljc","^:",19,"^6=",["^15",[["~$m"]]],"^6?",null,"^6>",["^15",[null,null]],"^8",1,"^6:",false,"^7",14,"^6C","~$boolean","^9",14,"^6<",1,"^6D",true,"^64",["^15",["^65",["^15",[["~$m"]]]]]],"~$default-error-handler",["^ ","^63",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",169,"^8",7,"^9",169,"^:",28,"^64",["^15",["^65",["^15",[["~$original-error","~$re-frame-error"]]]]]],"^G","^2>","^6","re_frame/interceptor.cljc","^:",28,"^6=",["^15",[["^7A","^7B"]]],"^6?",null,"^6>",["^15",[null,null]],"^8",1,"^6:",false,"^7",169,"^6C","~$ignore","^9",169,"^6<",2,"^6D",true,"^64",["^15",["^65",["^15",[["^7A","^7B"]]]]]],"~$change-direction",["^ ","^63",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",144,"^8",8,"^9",144,"^:",24,"^6F",true,"^64",["^15",["^65",["^15",[["^66"]]]]],"^6H","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^6F",true,"^G","^2F","^6","re_frame/interceptor.cljc","^:",24,"^6=",["^15",[["^66"]]],"^6?",null,"^6>",["^15",[null,null]],"^8",1,"^6:",false,"^7",144,"^6C",["^F",["^6K","^6B"]],"^9",144,"^6<",1,"^6D",true,"^64",["^15",["^65",["^15",[["^66"]]]]],"^6H","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^66",["^ ","^63",null,"^5",["^ ","^6F",true,"^6","re_frame/interceptor.cljc","^:",15,"^69",["^ ","^6:",false,"^6;",3,"^6<",3,"^6=",[["~$event","^79"],["^7E","^79","~$db"]],"^64",["^15",[["^7E","^79"],["^7E","^79","^7F"]]],"^6>",["^15",[null,null]]],"^8",8,"^7",131,"^9",131,"^64",["^15",["^65",["^15",[["^7E","^79"],["^7E","^79","^7F"]]]]],"^6H","Create a fresh context"],"^6F",true,"^G","^1M","^6","re_frame/interceptor.cljc","^:",15,"^69",["^ ","^6:",false,"^6;",3,"^6<",3,"^6=",[["^7E","^79"],["^7E","^79","^7F"]],"^64",["^15",[["^7E","^79"],["^7E","^79","^7F"]]],"^6>",["^15",[null,null]]],"^6=",[["^7E","^79"],["^7E","^79","^7F"]],"^6?",null,"^6;",3,"^6>",["^15",[null,null]],"^8",1,"^6:",false,"^6@",[["^ ","^6;",2,"^6:",false,"^6A",["^F",["^6K","^6B"]]],["^ ","^6;",3,"^6:",false,"^6A",["^F",["^6K","^6B"]]]],"^7",131,"^9",131,"^6<",3,"^6D",true,"^64",["^15",[["^7E","^79"],["^7E","^79","^7F"]]],"^6H","Create a fresh context"],"~$optional-interceptor-keys",["^ ","^G","^2E","^6","re_frame/interceptor.cljc","^7",12,"^8",1,"^9",12,"^:",31,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",12,"^8",6,"^9",12,"^:",31],"^6A","^7="]],"^13",["^ ","^R","^R","^W","^R","^T","^T"],"~:cljs.analyzer/constants",["^ ","^Y",["^F",["~:unnamed","~:tags","~:original-event","~:interceptor","~:event-handler","~:else","~:db","~:fx-handler","~:queue","~:db-handler","~:event","~:after","~:id","~:effects","~:comment","~:event-v","~:stack","~:re-frame.interceptor/original-exception?","~:error","~:coeffects","~:interceptors","~:ctx-handler","~:before","~:direction"]],"~:order",["^7T","^7U","^83","^7W","^7[","^7I","^7V","^80","^84","^7L","^7Z","^7N","^7Q","^7Y","^7S","^7K","^7O","^7X","^7P","^7R","^82","^7M","^7J","^81"]],"^1:",["^ ","^Z",["^F",[]]],"^1;",[],"^1<",["^U","^T","^X","^N","^R","^S","^Q","^P"]],"^K","^H","~:ns-specs",["^ "],"~:ns-spec-vars",["^F",[]],"~:compiler-options",["^31",[["^88","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^88","~:shadow-tweaks"],null,["^88","~:source-map-inline"],null,["^88","~:shadow-optimize-constants"],null,["^88","~:elide-asserts"],false,["^88","~:optimize-constants"],null,["^88","^1A"],null,["^88","~:external-config"],null,["^88","~:tooling-config"],null,["^88","~:emit-constants"],null,["^88","~:load-tests"],null,["^88","~:form-size-threshold"],null,["^88","~:global-goog-object&array"],null,["^88","~:data-readers"],null,["~:shadow.build/config","~:target"],"~:browser",["^88","~:infer-externs"],true,["^88","^1C"],null,["^8:","~:js-provider"],"~:external",["~:mode"],"~:dev",["^88","~:fn-invoke-direct"],null,["^88","~:source-map"],"/dev/null"]]]
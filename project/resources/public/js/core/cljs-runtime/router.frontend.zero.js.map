{"version":3,"sources":["router/frontend/zero.cljs"],"mappings":";AASA,GAAA,QAAAA,mCAAAC,4CAAAC,iDAAAC;AAAA;AAAA,AAAA,AAASC,6BAAM,gDAAA,hDAACC;;AAIhB,uCAAA,vCAAMC,sFAAiBC;AAAvB,AACE,OAAA,mFAAA,AAAA,gGAAIA;;AAEN,kCAAA,lCAAMC,4EAAOC;AAAb,AACE,IAAMC,aAAO,gHAAA,2CAAA,gEAAA,3NAACC,qDAAW,AAACC,mDAAuCH;AAAjE,AAEE,2CAAA,2CAAA,tFAACI,yJAEC,WAAKC;AAAL,AACE,IAAMP,QAAO,AAACQ,4DAAiBL,WAAOI;AAAtC,AAEE,uBAAA,mFAAA,iEAAA,mFAAA,iEAAA,2CAAA,0DAAA,8GAAA,lhBAACE,+ZAAkDF,uEACA,AAACR,qCAAgBC,2EACjB,qDAAA,mFAAA,xIAACU,+CAAOV;;AAC3D,AAACW,sBAAOd,2BAAMG;;AACd,AAACY,0BAAqBC;;AACtB,OAACC,+BAAqBP;GAV5B,qEAYE,WAAKA;AAAL,AACE,OAACQ,mBAAQ,AAACP,4DAAiBL,WAAOI;;;AACtC,OAACS;;AAEL,sCAAA,8CAAAC,pFAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,lEAAyBX;AAAzB,AACE,OAACe,6DAAqBf;;AAExB,iDAAA,yDAAAgB,1GAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAL,4BAAAK;WAAA,AAAAJ,4CAAAI,eAAA,lEAAoCjB;AAApC,AACE,AAACe,6DAAqBf;;AACtB,OAASmB;;AAKX,qBAAA,rBAACC,qGAEC,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAV,4BAAAU;aAAA,AAAAT,4CAAAS,eAAA,pEAAaC;AAAb,AACE,IAAMC,eAAa,+CAAA,AAAAC,4CAAA,mFAAA,9KAACtB,+DAAQb;IACtBoC,6NAAkBH,hIACD,AAACI,+CAAO,AAACC,6CAAKC,qBAAKC,jMACnB,6CAAA,7CAACC;AAHxB,AAIE,OAAChB,6DAAqB,EAAI,AAACiB,cAAIN,aACP,2DAAA,dAAKF,kBAAiB,AAACS,+BAAuBP,sBAC9CF;;AAE9B,yDAAA,zDAACU,qJAEC,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAxB,4BAAAwB;aAAA,AAAAvB,4CAAAuB,eAAA,pEAAab;AAAb,AAAA,kDAAA,gFAAA,2CAAA,wDACgCA","names":["js/router","js/router.frontend","js/router.frontend.zero","js/router.frontend.zero.state","router.frontend.zero/state","reagent.core.atom","router.frontend.zero/get-path-params","match","router.frontend.zero/init!","routes","router","reitit.frontend.router","router.frontend.transform/routes->reitit-routes","accountant.core/configure-navigation!","path","reitit.frontend.match_by_path","re-frame.core/dispatch","cljs.core.get_in","cljs.core/reset!","reagent.core/after-render","clerk.core/after-render!","clerk.core/navigate-page!","cljs.core/boolean","accountant.core/dispatch-current!","p__27131","map__27132","cljs.core/--destructure-map","cljs.core.get","router.frontend.zero/navigate!","accountant.core.navigate_BANG_","p__27136","map__27137","router.frontend.zero/navigate-and-reload!","js/location","re-frame.core/reg-fx","p__27138","map__27139","params","current-path","cljs.core/deref","new-params","cljs.core.remove","cljs.core.comp","cljs.core/nil?","cljs.core/val","cljs.core.into","cljs.core/seq","accountant.core/map->params","re_frame.core.reg_event_fx","p__27142","map__27143"],"sourcesContent":["(ns router.frontend.zero\n  (:require\n   [accountant.core  :as accountant]\n   [clerk.core       :as clerk]\n   [re-frame.core :as r]\n   [reagent.core :as reagent]\n   [reitit.frontend :as rf]\n   [router.frontend.transform :as router.transform]))\n\n(defonce state (reagent/atom {}))\n\n\n\n(defn get-path-params [match]\n  (-> match :parameters :path))\n\n(defn init! [routes]\n  (let [router (rf/router  (router.transform/routes->reitit-routes routes)\n                           {:conflicts nil})]\n    (accountant/configure-navigation!\n     {:nav-handler\n      (fn [path]\n        (let [match  (rf/match-by-path router path)]\n\n          (r/dispatch [:db/assoc-in [:router] {:path         path\n                                               :path-params  (get-path-params match)\n                                               :query-params (get-in match [:query-params])}]) \n          (reset! state match)\n          (reagent/after-render clerk/after-render!)\n          (clerk/navigate-page! path)))\n      :path-exists?\n      (fn [path]\n        (boolean (rf/match-by-path router path)))})\n    (accountant/dispatch-current!)))\n\n(defn navigate! [{:keys [path]}]\n  (accountant/navigate! path))\n\n(defn navigate-and-reload! [{:keys [path]}] \n  (accountant/navigate! path)\n  (.reload js/location))\n\n;; -----------------------------------------------------------------------------\n;; ---- Navigation Effects ----\n\n(r/reg-fx\n  :swap-query-params!\n  (fn [{:keys [params]}]\n    (let [current-path (get-in @state [:path])\n          new-params   (->> params\n                           (remove (comp nil? val))\n                           (into {}))]\n      (accountant/navigate! (if (seq new-params)\n                              (str current-path \"?\" (accountant/map->params new-params))\n                              current-path)))))\n\n(r/reg-event-fx\n  :router/swap-query-params!\n  (fn [{:keys [params]}]\n    {:swap-query-params! {:params params}}))\n\n\n;; ---- Navigation Effects ----\n;; -----------------------------------------------------------------------------\n"]}
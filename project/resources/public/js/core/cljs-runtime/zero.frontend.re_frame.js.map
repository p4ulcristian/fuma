{"version":3,"sources":["zero/frontend/re_frame.cljs"],"mappings":"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","names":["zero.frontend.re-frame/excluded-list","zero.frontend.re-frame/excluded-event?","event-key","cljs.core/boolean","p1__25088#","cljs.core/some","cljs.core._EQ_","zero.frontend.re-frame/debug","re_frame.core.__GT_interceptor","context","vec__25097","seq__25098","cljs.core/seq","first__25099","cljs.core/first","cljs.core/next","event","re_frame.core.get_coeffect","event-params","re_frame.core.console","zero.frontend.re-frame/standard-interceptors","re-frame.core/trim-v","zero.frontend.re-frame/reg-fx","re-frame.core/reg-fx","zero.frontend.re-frame/reg-event-fx","re-frame.core/reg-event-fx","zero.frontend.re-frame/dispatch","re-frame.core/dispatch","zero.frontend.re-frame/subscribe","re-frame.core/subscribe","zero.frontend.re-frame/reg-event-db","re-frame.core/reg-event-db","zero.frontend.re-frame/reg-sub","re-frame.core/reg-sub","G__25103","G__25104","p__25105","vec__25106","seq__25107","first__25108","vec__25109","cljs.core.nth","db","_","key","default-value","cljs.core.get","G__25112","G__25113","p__25114","vec__25115","seq__25116","first__25117","vec__25118","path","cljs.core.get_in","G__25121","G__25122","p__25123","vec__25124","seq__25125","first__25126","params","cljs.core.apply","cljs.core/assoc","cljs.core.concat","G__25127","G__25128","p__25129","vec__25130","value","cljs.core/assoc-in","G__25133","G__25134","p__25135","vec__25136","seq__25137","first__25138","_fn","item","cljs.core/cons","G__25139","G__25140","p__25141","vec__25142","seq__25143","first__25144","cljs.core/dissoc","G__25145","G__25146","p__25147","vec__25148","cljs.core.update_in","cljs.core/butlast","cljs.core/last"],"sourcesContent":["(ns zero.frontend.re-frame\n  (:require [re-frame.core :as re-frame.core\n             :refer [->interceptor console get-coeffect]]))\n\n(def excluded-list [])\n\n(defn excluded-event? [event-key]\n  (boolean (some #(= event-key %) excluded-list)))\n\n(def debug\n  (->interceptor\n   :id     :debug\n  ;;  :before (fn debug-before\n  ;;            [context]\n  ;;            (console :log \"Handling re-frame event:\" (get-coeffect context :event))\n  ;;            context)\n   :after  (fn debug-after\n             [context]\n             (let [event   (get-coeffect context :event)\n                   [event-key & event-params] event]\n               (when-not (excluded-event? event-key)\n                 ;(console :log context)\n                 (console :log event-key event-params))\n               context))))\n\n(def standard-interceptors  [re-frame.core/trim-v])\n                             ;debug\n                             \n\n\n(def reg-fx         re-frame.core/reg-fx)\n(def reg-event-fx   re-frame.core/reg-event-fx)\n(def dispatch       re-frame.core/dispatch)\n(def subscribe      re-frame.core/subscribe)\n(def reg-event-db   re-frame.core/reg-event-db)  ; Use standard re-frame without interceptors\n(def reg-sub        re-frame.core/reg-sub)       ; Use standard re-frame subscriptions\n\n(reg-sub\n  :db/get\n  (fn [db [_ key & [default-value]]]\n    (get db key default-value)))\n\n(reg-sub\n  :db/get-in\n  (fn [db [_ path & [default-value]]]\n    (get-in db path default-value)))\n\n(reg-event-db\n  :db/assoc\n  (fn [db [_ & params]]\n    (apply assoc (concat [db] params))))\n\n(reg-event-db\n  :db/assoc-in\n  (fn [db [_ path value]]\n    (assoc-in db path value)))\n\n(reg-event-db\n :db/update-in\n (fn [db [_ path _fn & params]]\n   (let [item   (get-in db path)\n         params (cons item params)]\n     (assoc-in db path (apply _fn params)))))\n\n(reg-event-db\n  :db/dissoc\n  (fn [db [_ & params]]\n    (apply dissoc (concat [db] params))))\n\n(reg-event-db\n  :db/dissoc-in\n  (fn [db [_ path]]\n    (update-in db (butlast path) dissoc (last path))))"]}
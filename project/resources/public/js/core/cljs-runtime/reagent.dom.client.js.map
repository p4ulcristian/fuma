{"version":3,"sources":["reagent/dom/client.cljs"],"mappings":";AASA,AAAA;;;iCAAA,yCAAAA,1EAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,6DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,+DAAA,/DAAMD,0EAEFE;AAFJ,AAGG,OAACC,kDAA4BD;;;AAHhC,CAAA,+DAAA,/DAAMF,0EAIFE,UAAUE;AAJd,AAQG,OAACD,kDAA4BD,UAAUE;;;AAR1C,CAAA,yDAAA,zDAAMJ;;AAAN,AAUA;;;6BAAA,7BAAMK,kEAECC;AAFP,AAGE,OAAUA;;AAiBZ,kCAAA,lCAAOC,4EAAkBC;AAAzB,AAGE,AAACC,sCAAgB;AAAA,AACE,IAAAC,4CAAUE;IAAVD,4CAAA;AAAA,AAAA,+CAAAA,9CAAUC;;AAAV,IAAA,AACE,AAACC;;AACDC;UAFF,AAAA,+CAAAJ,9CAAUE;;;AAG7B,IAAAG,4CAAUH;IAAVI,4CAAA;AAAA,AAAA,+CAAAA,9CAAUJ;;AAAV,IAAA,AACE,OAACK,0CAAoB,AAAQT;UAD/B,AAAA,+CAAAO,9CAAUH;;AAGZ,AAAA;;;;4BAAA,oCAAAd,hEAAMqB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAlB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0DAAA,1DAAMkB,qEAGEb,KAAKc;AAHb,AAIG,OAACC,wDAAOf,KAAKc,GAAGE;;;AAJnB,CAAA,0DAAA,1DAAMH,qEAKEb,KAAKc,GAAGG;AALhB,AAMG,CAAMC,oCAAkBC;;AACxB,IAAMC,OAAK;AAAA,AAAO,OAACC,kCAAaJ,SAASH;;eAAzC,XACMZ;AADN,AAEE,CAAM,AAAQA,gBAAUkB;;AACxB,OAASpB,YAAK,AAACW,0CAAoBV,gCAAaC;;;AAVrD,CAAA,oDAAA,pDAAMW;;AAAN,AAYA,AAAA,kCAAA,0CAAArB,5EAAM+B;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA5B,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,gEAAA,hEAAM4B,2EACF3B,UAAUkB;AADd,AAEG,kFAAA,3EAACc,8DAAahC,UAAUkB;;;AAF3B,CAAA,gEAAA,wBAAAU,xFAAMD,2EAGF3B,UAAUkB;AAHd,AAAA,IAAAW,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;eAAA,AAAAE,4CAAAF,eAAA,tEAGyBR,mIACOD;2BAJhC,AAAAW,4CAAAF,eAAA,lFAGkCI;wBAHlC,AAAAF,4CAAAF,eAAA,/EAGuDK;AAHvD,AAKG,CAAMZ,oCAAkBC;;AACxB,eAAA,XAAMjB;IACAkB,OAAK;AAAA,AAAO,OAACC,kCAAaJ,SAASH;;AADzC,AAEE,CAAM,AAAQZ,gBAAUkB;;AACxB,OAACW,mDAA6BnC,UAAU,AAACe,0CAAoBV,gCAAaC;;;AAT/E,CAAA,0DAAA,1DAAMqB;;AAAN","names":["var_args","G__27533","reagent.dom.client/create-root","js/Error","container","js/shadow.js.shim.module$react_dom$client.createRoot","options","reagent.dom.client/unmount","root","reagent.dom.client/reagent-root","js-props","js/shadow.js.shim.module$react.useEffect","*always-update*-orig-val__27537","*always-update*-temp-val__27538","reagent.impl.util/*always-update*","reagent.impl.batching/flush-after-render","js/undefined","*always-update*-orig-val__27539","*always-update*-temp-val__27540","js/shadow.js.shim.module$react.createElement","G__27543","reagent.dom.client/render","el","reagent.dom.client.render","reagent.impl.template/*current-default-compiler*","compiler","reagent.impl.batching/react-flush","js/shadow.js.shim.module$react_dom.flushSync","comp","reagent.impl.protocols/as-element","G__27555","reagent.dom.client/hydrate-root","p__27558","map__27559","cljs.core/--destructure-map","cljs.core.get","reagent.dom.client.hydrate_root","on-recoverable-error","identifier-prefix","js/shadow.js.shim.module$react_dom$client.hydrateRoot"],"sourcesContent":["(ns reagent.dom.client\n  (:require [\"react\" :as react]\n            [\"react-dom/client\" :as react-dom-client]\n            [\"react-dom\" :as react-dom]\n            [reagent.impl.batching :as batch]\n            [reagent.impl.protocols :as p]\n            [reagent.impl.template :as tmpl]\n            [reagent.impl.util :as util]))\n\n(defn create-root\n  \"Create a React Root connected to given container DOM element.\"\n  ([container]\n   (react-dom-client/createRoot container))\n  ([container options]\n   ;; TODO: Coerce options from Cljs to JS? Just cljs->js or only handle\n   ;; known keys?\n   ;; Also allow JS values without conversion.\n   (react-dom-client/createRoot container options)))\n\n(defn unmount\n  \"Unmount the given React Root\"\n  [^js root]\n  (.unmount root))\n\n;; Wrapper component notes:\n;; reagent-root wrapper is used to flush after-render queue after the\n;; initial mounting, only after React has really mounted nodes to DOM.\n;; FIXME: later after-render calls don't wait for React to mount nodes to DOM.\n;;\n;; comp wrapper from render or hydrate-root is used to convert the Reagent\n;; hiccup into React elements. This component is re-created on every render\n;; call to ensure React will consider it a new component always?\n;; This does mean Reagent will wrap the whole app in two levels of wrapper\n;; components. Is this a problem? No idea.\n;; Trying to use comp as a regular function in reagent-root, or calling\n;; as-element from reagent-root directlly didn't seem to work with\n;; live reloads. React didn't see new version of a component in a multi\n;; ns projects after changes.\n\n(defn- reagent-root [^js js-props]\n  ;; This will flush initial r/after-render callbacks.\n  ;; Later that queue will be flushed on Reagent render-loop.\n  (react/useEffect (fn []\n                     (binding [util/*always-update* false]\n                       (batch/flush-after-render)\n                       js/undefined)))\n  (binding [util/*always-update* true]\n    (react/createElement (.-comp js-props))))\n\n(defn render\n  \"Render the given Reagent element (i.e. Hiccup data)\n  into a given React root.\"\n  ([^js root el]\n   (render root el tmpl/*current-default-compiler*))\n  ([^js root el compiler]\n   (set! batch/react-flush react-dom/flushSync)\n   (let [comp (fn [] (p/as-element compiler el))\n         js-props #js {}]\n     (set! (.-comp js-props) comp)\n     (.render root (react/createElement reagent-root js-props)))))\n\n(defn hydrate-root\n  ([container el]\n   (hydrate-root container el nil))\n  ([container el {:keys [compiler on-recoverable-error identifier-prefix]\n                  :or {compiler tmpl/*current-default-compiler*}}]\n   (set! batch/react-flush react-dom/flushSync)\n   (let [js-props #js {}\n         comp (fn [] (p/as-element compiler el))]\n     (set! (.-comp js-props) comp)\n     (react-dom-client/hydrateRoot container (react/createElement reagent-root js-props)))))\n"],"x_google_ignoreList":[0]}
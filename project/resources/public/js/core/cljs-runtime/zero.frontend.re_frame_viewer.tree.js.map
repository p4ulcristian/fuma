{"version":3,"sources":["zero/frontend/re_frame_viewer/tree.cljs"],"mappings":"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","names":["zero.frontend.re-frame-viewer.tree/save-to-local-storage","key","value","e14136","js/localStorage","cljs.core.pr_str","js/Error","e","js/console.warn","zero.frontend.re-frame-viewer.tree/load-from-local-storage","default-value","e14137","stored","cljs.reader.read_string","zero.frontend.re-frame-viewer.tree/parse-path-input","input","cljs.core/empty?","clojure.string.split","cljs.core.map","clojure.string/trim","p1__14138#","cljs.core.filter","p1__14139#","clojure.string/starts-with?","cljs.core.keyword","cljs.core.subs","cljs.core/vec","G__14140","G__14141","zero.frontend.re-frame/reg-sub","db","_","cljs.core.get_in","G__14142","G__14143","G__14144","G__14145","G__14146","G__14147","zero.frontend.re-frame/reg-event-db","p__14148","vec__14149","cljs.core.nth","path","expanded","cljs.core/assoc-in","cljs.core/contains?","cljs.core.disj","cljs.core.conj","G__14152","G__14153","p__14154","vec__14155","parsed-path","zero.frontend.re-frame-viewer.tree/path-input-style","zero.frontend.re-frame-viewer.tree/tree-container-style","zero.frontend.re-frame-viewer.tree/tree-container-indent","level","zero.frontend.re-frame-viewer.tree/tree-key-button-style","expandable?","expanded?","and__5023__auto__","zero.frontend.re-frame-viewer.tree/tree-value-container-style","zero.frontend.re-frame-viewer.tree/expandable?","cljs.core/map?","cljs.core/vector?","cljs.core/list?","cljs.core/set?","zero.frontend.re-frame-viewer.tree/get-value-preview","cljs.core/count","cljs.core/Keyword","zero.frontend.re-frame-viewer.tree/tree-key-button","button-text","G__14158","zero.frontend.re-frame/dispatch","cljs.core/identity","path-string","clojure.string.join","cljs.core/str","G__14159","zero.frontend.re-frame-viewer.tree/tree-children","cljs.core.doall","cljs.core.map_indexed","p__14160","vec__14161","idx","child-key","child-value","child-path","zero.frontend.re-frame-viewer.tree/tree-node","cljs.core.sort_by","cljs.core/first","cljs.core/seq","cljs.core/vector","cljs.core/deref","expanded-paths","G__14164","zero.frontend.re-frame/subscribe","zero.frontend.re-frame-viewer.tree/tree-viewer","filtered-data","current-path","p__14165","vec__14166"],"sourcesContent":["(ns zero.frontend.re-frame-viewer.tree\n  (:require\n   [\"react\" :as react]\n   [cljs.reader :as cljs.reader]\n   [zero.frontend.re-frame :as r]))\n\n;; LocalStorage helpers\n(defn save-to-local-storage [key value]\n  (try\n    (.setItem js/localStorage key (pr-str value))\n    (catch js/Error e\n      (js/console.warn \"Failed to save to localStorage:\" e))))\n\n(defn load-from-local-storage [key default-value]\n  (try\n    (let [stored (.getItem js/localStorage key)]\n      (if (nil? stored)\n        default-value\n        (cljs.reader/read-string stored)))\n    (catch js/Error e\n      (js/console.warn \"Failed to load from localStorage:\" e)\n      default-value)))\n\n;; Path parsing helper\n(defn parse-path-input [input]\n  (if (empty? input)\n    []\n    (->> (clojure.string/split input #\"\\s+\")\n         (map clojure.string/trim)\n         (filter #(not (empty? %)))\n         (map #(if (clojure.string/starts-with? % \":\")\n                 (keyword (subs % 1))\n                 %))\n         vec)))\n\n;; Tree expansion state management\n(r/reg-sub\n  :tree-viewer/expanded-paths\n  (fn [db _]\n    (get-in db [:dev :tree-viewer :expanded] #{})))\n\n(r/reg-sub\n  :tree-viewer/path-input\n  (fn [db _]\n    (get-in db [:dev :tree-viewer :path-input] \n            (load-from-local-storage \"tree-viewer-path-input\" \"\"))))\n\n(r/reg-sub\n  :tree-viewer/current-path\n  (fn [db _]\n    (get-in db [:dev :tree-viewer :current-path] \n            (load-from-local-storage \"tree-viewer-current-path\" []))))\n\n(r/reg-event-db\n  :tree-viewer/toggle-path\n  (fn [db [_ path]]\n    (let [expanded (get-in db [:dev :tree-viewer :expanded] #{})]\n      (assoc-in db [:dev :tree-viewer :expanded]\n                (if (contains? expanded path)\n                  (disj expanded path)\n                  (conj expanded path))))))\n\n(r/reg-event-db\n  :tree-viewer/set-path-input\n  (fn [db [_ input]]\n    (let [parsed-path (parse-path-input input)]\n      (save-to-local-storage \"tree-viewer-path-input\" input)\n      (save-to-local-storage \"tree-viewer-current-path\" parsed-path)\n      (-> db\n          (assoc-in [:dev :tree-viewer :path-input] input)\n          (assoc-in [:dev :tree-viewer :current-path] parsed-path)))))\n\n;; Styling for tree viewer\n(defn path-input-style []\n  {:width \"100%\"\n   :padding \"8px 12px\"\n   :margin-bottom \"12px\"\n   :background \"#222\"\n   :border \"1px solid #DAA520\"\n   :border-radius \"0\"\n   :font-size \"12px\"\n   :font-family \"'Courier New', monospace\"\n   :color \"#DAA520\"\n   :outline \"none\"})\n\n(defn tree-container-style []\n  {:flex \"1\"\n   :overflow \"auto\"\n   :border \"2px solid #DAA520\"\n   :border-radius \"0\"\n   :background \"#222\"\n   :padding \"10px\"})\n\n(defn tree-container-indent [level]\n  {:margin-left (str (* level 15) \"px\")\n   :margin-bottom \"4px\"})\n\n(defn tree-key-button-style [expandable? expanded?]\n  {:display \"block\"\n   :width \"100%\"\n   :text-align \"left\"\n   :padding \"8px 12px\"\n   :margin \"2px 0\"\n   :font-family \"'Courier New', Monaco, monospace\"\n   :font-size \"13px\"\n   :font-weight \"bold\"\n   :background (cond\n                 (and expandable? expanded?) \"#DAA520\"\n                 expandable? \"rgba(218, 165, 32, 0.2)\"\n                 :else \"rgba(135, 206, 235, 0.1)\")\n   :color (cond\n            (and expandable? expanded?) \"#333\"\n            expandable? \"#DAA520\"\n            :else \"#87CEEB\")\n   :border (if expandable?\n             \"1px solid #DAA520\"\n             \"1px solid #87CEEB\")\n   :border-radius \"0\"\n   :cursor \"pointer\"\n   :transition \"all 0.2s\"})\n\n(defn tree-value-container-style []\n  {:margin-top \"8px\"\n   :padding-left \"20px\"\n   :border-left \"2px solid rgba(218, 165, 32, 0.3)\"})\n\n;; Helper functions\n(defn expandable? [value]\n  (or (map? value) (vector? value) (list? value) (set? value)))\n\n(defn get-value-preview [value]\n  (cond\n    (map? value) (str \"{\" (count value) \" items}\")\n    (vector? value) (str \"[\" (count value) \" items]\")\n    (list? value) (str \"(\" (count value) \" items)\")\n    (set? value) (str \"#{\" (count value) \" items}\")\n    (string? value) (str \"\\\"\" value \"\\\"\")\n    (keyword? value) (str value)\n    (nil? value) \"nil\"\n    :else (str value)))\n\n;; Forward declaration\n(declare tree-node)\n\n\n;; Tree node components\n(defn tree-key-button [key value level path expanded? expandable?]\n  (let [button-text (if expandable?\n                     (str key \" \" (get-value-preview value))\n                     (str key \" \" (get-value-preview value)))]\n    [:div {:style (tree-container-indent level)}\n     [:button {:style (tree-key-button-style expandable? expanded?)\n               :on-click (if expandable?\n                          #(r/dispatch [:tree-viewer/toggle-path path])\n                          identity)\n               :on-double-click #(let [path-string (clojure.string/join \" \" (map str path))]\n                                  (r/dispatch [:tree-viewer/set-path-input path-string]))}\n      button-text]]))\n\n(defn tree-children [value level path]\n  (when (expandable? value)\n    [:div {:style (tree-value-container-style)}\n     (doall\n      (map-indexed\n       (fn [idx [child-key child-value]]\n         (let [child-path (conj path child-key)]\n           ^{:key (str path \"-\" idx)}\n           [tree-node child-key child-value (inc level) child-path]))\n       (if (map? value)\n         (sort-by first (seq value))\n         (map-indexed vector value))))]))\n\n(defn tree-node [key value level path]\n  (let [expanded-paths @(r/subscribe [:tree-viewer/expanded-paths])\n        expanded? (contains? expanded-paths path)\n        expandable? (expandable? value)]\n    \n    [:div\n     [tree-key-button key value level path expanded? expandable?]\n     (when (and expandable? expanded?)\n       [tree-children value level path])]))\n\n\n;; Root tree viewer component\n(defn tree-viewer [filtered-data current-path]\n  [:div {:style (tree-container-style)}\n   (cond\n     (nil? filtered-data)\n     [:div {:style {:color \"#ff6b6b\" :padding \"20px\" :text-align \"center\"}}\n      \"Path not found\"]\n     \n     (map? filtered-data)\n     (doall\n      (map-indexed\n       (fn [idx [key value]]\n         ^{:key idx}\n         [tree-node (str key) value 0 [key]])\n       (sort-by first (seq filtered-data))))\n     \n     :else\n     [:div {:style {:color \"#DAA520\" :padding \"20px\" :font-family \"'Courier New', monospace\"}}\n      (get-value-preview filtered-data)])])"]}
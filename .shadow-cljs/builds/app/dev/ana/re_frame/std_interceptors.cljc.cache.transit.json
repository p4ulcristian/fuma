["^ ","~:output",["^ ","~:js","goog.provide('re_frame.std_interceptors');\nre_frame.std_interceptors.debug = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$debug_before(context){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Handling re-frame event:\",re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442))], 0));\n\nreturn context;\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$debug_after(context){\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar orig_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new_db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No app-db changes in:\",event], 0));\n} else {\nvar vec__24628_24688 = clojure.data.diff(orig_db,new_db);\nvar only_before_24689 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__24628_24688,(0),null);\nvar only_after_24690 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__24628_24688,(1),null);\nvar db_changed_QMARK__24691 = (((!((only_before_24689 == null)))) || ((!((only_after_24690 == null)))));\nif(db_changed_QMARK__24691){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"group\",\"group\",582596132),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"db clojure.data/diff for:\",event], 0));\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only before:\",only_before_24689], 0));\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only after :\",only_after_24690], 0));\n\nre_frame.loggers.console(new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No app-db changes resulted from:\",event], 0));\n}\n}\n\nreturn context;\n})], 0));\nre_frame.std_interceptors.unwrap = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"unwrap\",\"unwrap\",-1399175462),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$unwrap_before(context){\nvar vec__24633 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__24633,(0),null);\nvar payload = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__24633,(1),null);\nvar event = vec__24633;\nif((!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),cljs.core.count(event))) && (cljs.core.map_QMARK_(payload)))))){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"re-frame: \\\"unwrap\\\" interceptor must be a vector of two elements \\\"[event-id payload-map]\\\"\",event);\n} else {\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),payload);\n}\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$unwrap_after(context){\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403)));\n})], 0));\nre_frame.std_interceptors.trim_v = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"trim-v\",\"trim-v\",-1274938640),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$trim_v_before(context){\nif((!(cljs.core.vector_QMARK_(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442)))))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"trim-v\\\" interceptor expected event to be a vector. Got a \",cljs.core.type(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442)))], 0));\n\nreturn context;\n} else {\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),cljs.core.subvec,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(1)], 0));\n}\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$trim_v_after(context){\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403)));\n})], 0));\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n * \n *   These handlers take two arguments;  `db` and `event`, and they return `db`.\n * \n *    (fn [db event]\n *       ....)\n * \n *   So, the interceptor wraps the given handler:\n *   1. extracts two `:coeffects` keys: db and event\n *   2. calls handler-fn\n *   3. stores the db result back into context's `:effects`\n */\nre_frame.std_interceptors.db_handler__GT_interceptor = (function re_frame$std_interceptors$db_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"db-handler\",\"db-handler\",579530098),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$db_handler__GT_interceptor_$_db_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__24637 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__24638 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__24638);\n\ntry{try{var map__24640 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__24640__$1 = cljs.core.__destructure_map(map__24640);\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24640__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24640__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null,db,event)));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__24410__auto___24702 = re_frame.interop.now();\nvar duration__24411__auto___24703 = (end__24410__auto___24702 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__24411__auto___24703,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__24410__auto___24702);\n} else {\n}\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__24637);\n}})():(function (){var map__24643 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__24643__$1 = cljs.core.__destructure_map(map__24643);\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24643__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24643__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null,db,event)));\n})());\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__24412__auto___24704 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__24412__auto___24704);\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n * \n *   These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n * \n *    (fn [coeffects event]\n *       {:db ...\n *        :fx ...})\n * \n * Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n *   1. extracts `:coeffects`\n *   2. call handler-fn giving coeffects\n *   3. stores the result back into the `:effects`\n */\nre_frame.std_interceptors.fx_handler__GT_interceptor = (function re_frame$std_interceptors$fx_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"fx-handler\",\"fx-handler\",-549783097),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$fx_handler__GT_interceptor_$_fx_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__24646 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__24647 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__24647);\n\ntry{try{var map__24649 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__24649__$1 = cljs.core.__destructure_map(map__24649);\nvar coeffects = map__24649__$1;\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24649__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null,coeffects,event)));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__24410__auto___24715 = re_frame.interop.now();\nvar duration__24411__auto___24716 = (end__24410__auto___24715 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__24411__auto___24716,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__24410__auto___24715);\n} else {\n}\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__24646);\n}})():(function (){var map__24650 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__24650__$1 = cljs.core.__destructure_map(map__24650);\nvar coeffects = map__24650__$1;\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24650__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null,coeffects,event)));\n})());\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__24412__auto___24717 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__24412__auto___24717);\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n *   These advanced handlers take one argument: `context` and they return a modified `context`.\n *   Example:\n * \n *    (fn [context]\n *       (enqueue context [more interceptors]))\n */\nre_frame.std_interceptors.ctx_handler__GT_interceptor = (function re_frame$std_interceptors$ctx_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"ctx-handler\",\"ctx-handler\",-1777672230),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$ctx_handler__GT_interceptor_$_ctx_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__24651 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__24652 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__24652);\n\ntry{try{return (handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null,context));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__24410__auto___24719 = re_frame.interop.now();\nvar duration__24411__auto___24720 = (end__24410__auto___24719 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__24411__auto___24720,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__24410__auto___24719);\n} else {\n}\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__24651);\n}})():(handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null,context)));\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__24412__auto___24721 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__24412__auto___24721);\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\nre_frame.std_interceptors.path = (function re_frame$std_interceptors$path(var_args){\nvar args__5755__auto__ = [];\nvar len__5749__auto___24744 = arguments.length;\nvar i__5750__auto___24745 = (0);\nwhile(true){\nif((i__5750__auto___24745 < len__5749__auto___24744)){\nargs__5755__auto__.push((arguments[i__5750__auto___24745]));\n\nvar G__24750 = (i__5750__auto___24745 + (1));\ni__5750__auto___24745 = G__24750;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5756__auto__ = ((((0) < args__5755__auto__.length))?(new cljs.core.IndexedSeq(args__5755__auto__.slice((0)),(0),null)):null);\nreturn re_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic(argseq__5756__auto__);\n});\n\n(re_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar path = cljs.core.flatten(args);\nvar history_key = new cljs.core.Keyword(\"re-frame.db\",\"path-history\",\"re-frame.db/path-history\",-1466258079);\nif(cljs.core.empty_QMARK_(path)){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"path\\\" interceptor given no params\"], 0));\n} else {\n}\n\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"path\",\"path\",-188191168),new cljs.core.Keyword(null,\"comment\",\"comment\",532206069),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"re-frame.db\",\"path\",\"re-frame.db/path\",-1845708459),path], null),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function (context){\nvar original_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nreturn re_frame.interceptor.assoc_coeffect(cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,history_key,cljs.core.conj,original_db),new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(original_db,path));\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function (context){\nvar db_store = history_key.cljs$core$IFn$_invoke$arity$1(context);\nvar original_db = cljs.core.peek(db_store);\nvar new_db_store = cljs.core.pop(db_store);\nvar context_SINGLEQUOTE_ = re_frame.interceptor.assoc_coeffect(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,history_key,new_db_store),new cljs.core.Keyword(null,\"db\",\"db\",993250759),original_db);\nvar db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\nreturn context_SINGLEQUOTE_;\n} else {\nreturn re_frame.interceptor.assoc_effect(context_SINGLEQUOTE_,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(original_db,path,db));\n}\n})], 0));\n}));\n\n(re_frame.std_interceptors.path.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_frame.std_interceptors.path.cljs$lang$applyTo = (function (seq24657){\nvar self__5735__auto__ = this;\nreturn self__5735__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq24657));\n}));\n\nre_frame.std_interceptors.enrich = (function re_frame$std_interceptors$enrich(f){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"enrich\",\"enrich\",-2108921925),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$enrich_$_enrich_after(context){\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar prev_db = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\nvar new_db = (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(prev_db,event) : f.call(null,prev_db,event));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(function (){var or__5025__auto__ = new_db;\nif(cljs.core.truth_(or__5025__auto__)){\nreturn or__5025__auto__;\n} else {\nreturn prev_db;\n}\n})());\n})], 0));\n});\nre_frame.std_interceptors.after = (function re_frame$std_interceptors$after(f){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"after\",\"after\",594996914),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$after_$_after_after(context){\nvar db = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\n(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(db,event) : f.call(null,db,event));\n\nreturn context;\n})], 0));\n});\nre_frame.std_interceptors.on_changes = (function re_frame$std_interceptors$on_changes(var_args){\nvar args__5755__auto__ = [];\nvar len__5749__auto___24759 = arguments.length;\nvar i__5750__auto___24760 = (0);\nwhile(true){\nif((i__5750__auto___24760 < len__5749__auto___24759)){\nargs__5755__auto__.push((arguments[i__5750__auto___24760]));\n\nvar G__24761 = (i__5750__auto___24760 + (1));\ni__5750__auto___24760 = G__24761;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5756__auto__ = ((((2) < args__5755__auto__.length))?(new cljs.core.IndexedSeq(args__5755__auto__.slice((2)),(0),null)):null);\nreturn re_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5756__auto__);\n});\n\n(re_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic = (function (f,out_path,in_paths){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"on-changes\",\"on-changes\",1345912602),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$on_change_after(context){\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar old_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar new_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__24672_SHARP_){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(new_db,p1__24672_SHARP_);\n}),in_paths);\nvar old_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__24673_SHARP_){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(old_db,p1__24673_SHARP_);\n}),in_paths);\nvar changed_ins_QMARK_ = (function (){var and__5023__auto__ = cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nif(and__5023__auto__){\nreturn cljs.core.some(cljs.core.false_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.identical_QMARK_,new_ins,old_ins));\n} else {\nreturn and__5023__auto__;\n}\n})();\nif(cljs.core.truth_(changed_ins_QMARK_)){\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(new_db,out_path,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,new_ins)));\n} else {\nreturn context;\n}\n})], 0));\n}));\n\n(re_frame.std_interceptors.on_changes.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(re_frame.std_interceptors.on_changes.cljs$lang$applyTo = (function (seq24674){\nvar G__24675 = cljs.core.first(seq24674);\nvar seq24674__$1 = cljs.core.next(seq24674);\nvar G__24676 = cljs.core.first(seq24674__$1);\nvar seq24674__$2 = cljs.core.next(seq24674__$1);\nvar self__5734__auto__ = this;\nreturn self__5734__auto__.cljs$core$IFn$_invoke$arity$variadic(G__24675,G__24676,seq24674__$2);\n}));\n\n/**\n * An interceptor which adds registered global interceptors to the context's queue.\n * \n * NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\n */\nre_frame.std_interceptors.inject_global_interceptors = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"inject-global-interceptors\",\"inject-global-interceptors\",-2144129737),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$inject_global_interceptors_before(context){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),(function (p1__24679_SHARP_){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(re_frame.settings.get_global_interceptors(),p1__24679_SHARP_);\n}));\n})], 0));\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","contains re-frame supplied, standard interceptors","~:file","re_frame/std_interceptors.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",30],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$shadow.js.shim.module$react"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.std-interceptors","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^Q","~$data","~$clojure.data","~$re-frame.trace","^T","~$re-frame.settings","^U","~$cljs.core","^V","~$interceptor","^Q","~$goog","^X","~$trace","^T","~$re-frame.utils","^Z","~$settings","^U","~$re-frame.loggers","^10","~$utils","^Z","^P","^P","^S","^S","~$re-frame.db","^12"],"~:seen",["^G",["~:require"]],"~:uses",["^ ","~$->interceptor","^Q","~$get-effect","^Q","~$get-coeffect","^Q","~$assoc-coeffect","^Q","~$assoc-effect","^Q","~$update-coeffect","^Q","~$console","^10","~$app-db","^12"],"~:require-macros",["^ ","^T","^T","^Y","^T","^V","^V"],"~:form",["~#list",["~$ns","^I","contains re-frame supplied, standard interceptors",["^1@",["^14",["^Q","~:refer",["^16","^17","^18","^19","^1:","^1;"]],["^10","^1B",["^1<"]],["^U","~:as","^["],["^12","^1B",["^1="]],["^S","^1C","^R"],["^P","^1C","^O"],["^Z","^1C","^11"],["^T","^1C","^Y","~:include-macros",true],["^Q","^1C","^W"]]]]],"~:flags",["^ ","^14",["^G",[]]],"~:js-deps",[],"~:deps",["^X","^V","^Q","^10","^U","^12","^S","^P","^Z","^T"]],"^L","^I","~:resource-id",["~:shadow.build.classpath/resource","re_frame/std_interceptors.cljc"],"~:compiled-at",1759342953980,"^J",["^ ","^O","^P","^Q","^Q","^R","^S","^T","^T","^U","^U","^V","^V","^W","^Q","^X","^X","^Y","^T","^Z","^Z","^[","^U","^10","^10","^11","^Z","^P","^P","^S","^S","^12","^12"],"~:resource-name","re_frame/std_interceptors.cljc","~:warnings",[],"~:source","(ns re-frame.std-interceptors\n  \"contains re-frame supplied, standard interceptors\"\n  (:require\n   [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect update-coeffect]]\n   [re-frame.loggers :refer [console]]\n   [re-frame.settings :as settings]\n   [re-frame.db :refer [app-db]]\n   [clojure.data :as data]\n   [re-frame.cofx :as cofx]\n   [re-frame.utils :as utils]\n   [re-frame.trace :as trace :include-macros true]\n   [re-frame.interceptor :as interceptor]))\n\n(def debug\n  (->interceptor\n   :id     :debug\n   :before (fn debug-before\n             [context]\n             (console :log \"Handling re-frame event:\" (get-coeffect context :event))\n             context)\n   :after  (fn debug-after\n             [context]\n             (let [event   (get-coeffect context :event)\n                   orig-db (get-coeffect context :db)\n                   new-db  (get-effect   context :db ::not-found)]\n               (if (= new-db ::not-found)\n                 (console :log \"No app-db changes in:\" event)\n                 (let [[only-before only-after] (data/diff orig-db new-db)\n                       db-changed?    (or (some? only-before) (some? only-after))]\n                   (if db-changed?\n                     (do (console :group \"db clojure.data/diff for:\" event)\n                         (console :log \"only before:\" only-before)\n                         (console :log \"only after :\" only-after)\n                         (console :groupEnd))\n                     (console :log \"No app-db changes resulted from:\" event))))\n               context))))\n\n(def unwrap\n  (->interceptor\n   :id      :unwrap\n   :before  (fn unwrap-before\n              [context]\n              (let [[_ payload :as event] (get-coeffect context :event)]\n                (if-not (and (= 2 (count event))\n                             (map? payload))\n                  (throw (ex-info\n                          \"re-frame: \\\"unwrap\\\" interceptor must be a vector of two elements \\\"[event-id payload-map]\\\"\"\n                          event))\n                  (assoc-coeffect context :event payload))))\n   :after   (fn unwrap-after\n              [context]\n              (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n(def trim-v\n  (->interceptor\n   :id      :trim-v\n   :before  (fn trim-v-before\n              [context]\n              (if-not (vector? (get-coeffect context :event))\n                (do\n                  (console :warn \"re-frame: \\\"trim-v\\\" interceptor expected event to be a vector. Got a \" (type (get-coeffect context :event)))\n                  context)\n                (update-coeffect context :event subvec 1)))\n   :after   (fn trim-v-after\n              [context]\n              (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n;; -- Interceptor Factories - PART 1 ---------------------------------------------------------------\n;;\n;; These 3 factories wrap the 3 kinds of event handlers.\n;;\n\n(defn db-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`\"\n  [handler-fn]\n  (->interceptor\n   :id     :db-handler\n   :before (fn db-handler-before\n             [context]\n             (let [new-context\n                   (trace/with-trace\n                     {:op-type   :event/handler\n                      :operation (get-coeffect context :original-event)}\n                     (let [{:keys [db event]} (get-coeffect context)]\n                       (->> (handler-fn db event)\n                            (assoc-effect context :db))))]\n                ;; We merge these tags outside of the :event/handler trace because we want them to be assigned to the parent\n                ;; wrapping trace.\n               (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n               new-context))))\n\n(defn fx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :fx ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`\"\n  [handler-fn]\n  (->interceptor\n   :id     :fx-handler\n   :before (fn fx-handler-before\n             [context]\n             (let [new-context\n                   (trace/with-trace\n                     {:op-type   :event/handler\n                      :operation (get-coeffect context :original-event)}\n                     (let [{:keys [event] :as coeffects} (get-coeffect context)]\n                       (->> (handler-fn coeffects event)\n                            (assoc context :effects))))]\n               (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n               new-context))))\n\n(defn ctx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))\"\n  [handler-fn]\n  (->interceptor\n   :id     :ctx-handler\n   :before (fn ctx-handler-before\n             [context]\n             (let [new-context\n                   (trace/with-trace\n                     {:op-type   :event/handler\n                      :operation (get-coeffect context :original-event)}\n                     (handler-fn context))]\n               (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n               new-context))))\n\n;; -- Interceptors Factories -  PART 2 ------------------------------------------------------------\n\n(defn path\n  [& args]\n  (let [path (flatten args)\n        history-key :re-frame.db/path-history]    ;; this is where, within `context`, we store the original dbs\n    (when (empty? path)\n      (console :error \"re-frame: \\\"path\\\" interceptor given no params\"))\n    (->interceptor\n     :id      :path\n     :comment {:re-frame.db/path path}\n     :before  (fn\n                [context]\n                (let [original-db (get-coeffect context :db)]\n                  (-> context\n                      (update history-key conj original-db)\n                      (assoc-coeffect :db (get-in original-db path)))))\n     :after   (fn [context]\n                (let [db-store     (history-key context)\n                      original-db  (peek db-store)\n                      new-db-store (pop db-store)\n                      context'     (-> (assoc context history-key new-db-store)\n                                       (assoc-coeffect :db original-db))     ;; put the original db back so that things like debug work later on\n                      db           (get-effect context :db ::not-found)]\n                  (if (= db ::not-found)\n                    context'\n                    (->> (assoc-in original-db path db)\n                         (assoc-effect context' :db))))))))\n\n(defn enrich\n  [f]\n  (->interceptor\n   :id :enrich\n   :after (fn enrich-after\n            [context]\n            (let [event   (get-coeffect context :event)\n                  prev-db (if (contains? (get-effect context) :db)\n                            (get-effect context :db) ;; If no db effect is returned, we provide the original coeffect.\n                            (get-coeffect context :db))\n                  new-db  (f prev-db event)]\n              (assoc-effect context :db (or new-db prev-db)))))) ;; If the enriched db is nil, use the last known good db\n\n(defn after\n  [f]\n  (->interceptor\n   :id :after\n   :after (fn after-after\n            [context]\n            (let [db    (if (contains? (get-effect context) :db)\n                          (get-effect context :db)\n                          (get-coeffect context :db))\n                  event (get-coeffect context :event)]\n              (f db event) ;; call f for side effects\n              context)))) ;; context is unchanged\n\n(defn  on-changes\n  [f out-path & in-paths]\n  (->interceptor\n   :id    :on-changes\n   :after (fn on-change-after\n            [context]\n            (let [new-db   (get-effect context :db)\n                  old-db   (get-coeffect context :db)\n\n                   ;; work out if any \"inputs\" have changed\n                  new-ins      (map #(get-in new-db %) in-paths)\n                  old-ins      (map #(get-in old-db %) in-paths)\n                   ;; make sure the db is actually set in the effect\n                  changed-ins? (and (contains? (get-effect context) :db)\n                                    (some false? (map identical? new-ins old-ins)))]\n\n               ;; if one of the inputs has changed, then run 'f'\n              (if changed-ins?\n                (->> (apply f new-ins)\n                     (assoc-in new-db out-path)\n                     (assoc-effect context :db))\n                context)))))\n\n(def inject-global-interceptors\n  \"An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\"\n  (->interceptor\n   :id     :inject-global-interceptors\n   :before (fn inject-global-interceptors-before\n             [context]\n             (update context :queue #(into (settings/get-global-interceptors) %)))))\n","~:reader-features",["^G",["~:cljs"]],"~:used-var-namespaces",["^G",["~$re-frame.interop","^Q","^T","^U","^V","^I","^10","^S"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.std-interceptors/debug","re_frame.interceptor.__GT_interceptor","context","re_frame.loggers.console","re_frame.interceptor.get_coeffect","event","orig-db","new-db","re_frame.interceptor.get_effect","cljs.core._EQ_","vec__24628","cljs.core.nth","only-before","only-after","clojure.data/diff","db-changed?","re-frame.loggers/console","re-frame.std-interceptors/unwrap","vec__24633","_","payload","cljs.core/count","cljs.core/map?","cljs.core.ex_info","re-frame.interceptor/assoc-coeffect","re-frame.std-interceptors/trim-v","cljs.core/vector?","cljs.core/type","re_frame.interceptor.update_coeffect","cljs.core/subvec","re-frame.std-interceptors/db-handler->interceptor","handler-fn","new-context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__24637","re-frame.trace/*current-trace*","*current-trace*-temp-val__24638","re-frame.trace/start-trace","end__24410__auto__","re-frame.interop/now","duration__24411__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","map__24640","cljs.core/--destructure-map","cljs.core.get","map__24643","db","re-frame.interceptor/assoc-effect","new-trace__24412__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","re-frame.std-interceptors/fx-handler->interceptor","*current-trace*-orig-val__24646","*current-trace*-temp-val__24647","map__24649","map__24650","coeffects","re-frame.std-interceptors/ctx-handler->interceptor","*current-trace*-orig-val__24651","*current-trace*-temp-val__24652","var_args","args__5755__auto__","len__5749__auto__","i__5750__auto__","argseq__5756__auto__","cljs.core/IndexedSeq","re-frame.std-interceptors/path","seq24657","self__5735__auto__","cljs.core/seq","args","path","cljs.core/flatten","history-key","cljs.core/empty?","original-db","cljs.core.get_in","db-store","cljs.core/peek","new-db-store","cljs.core/pop","context'","cljs.core/assoc-in","re-frame.std-interceptors/enrich","f","prev-db","cljs.core/contains?","or__5025__auto__","re-frame.std-interceptors/after","re-frame.std-interceptors/on-changes","seq24674","G__24675","cljs.core/first","cljs.core/next","G__24676","self__5734__auto__","out-path","in-paths","old-db","new-ins","p1__24672#","cljs.core.map","old-ins","p1__24673#","changed-ins?","and__5023__auto__","cljs.core/some","cljs.core/false?","cljs.core/identical?","cljs.core.apply","re-frame.std-interceptors/inject-global-interceptors","p1__24679#","cljs.core.into","re-frame.settings/get-global-interceptors"]],"~:used-vars",["^G",["~$cljs.core/--destructure-map","~$re-frame.interceptor/get-effect","~$cljs.core/vector?","~$cljs.core/=","~$re-frame.trace/traces","~$re-frame.std-interceptors/debug","~$cljs.core/IndexedSeq","~$re-frame.interceptor/->interceptor","~$cljs.core/count","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.trace/start-trace","~$re-frame.loggers/console","~$re-frame.std-interceptors/inject-global-interceptors","~$cljs.core/dissoc","~$re-frame.std-interceptors/trim-v","~$re-frame.interop/now","~$cljs.core/pop","~$cljs.core/empty?","~$cljs.core/contains?","~$re-frame.std-interceptors/db-handler->interceptor","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/identical?","~$cljs.core/update","~$cljs.core/peek","~$cljs.core/map","~$cljs.core/get-in","~$cljs.core/swap!","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$cljs.core/get","~$re-frame.std-interceptors/enrich","~$clojure.data/diff","~$re-frame.std-interceptors/ctx-handler->interceptor","~$cljs.core/flatten","~$re-frame.interceptor/assoc-coeffect","~$re-frame.std-interceptors/fx-handler->interceptor","~$cljs.core/subvec","~$cljs.core/nth","~$cljs.core/ex-info","~$cljs.core/false?","~$re-frame.trace/*current-trace*","~$re-frame.std-interceptors/after","~$re-frame.settings/get-global-interceptors","~$cljs.core/next","~$re-frame.interceptor/get-coeffect","~$cljs.core/not","~$re-frame.interceptor/assoc-effect","~$cljs.core/assoc","~$cljs.core/assoc-in","~$re-frame.std-interceptors/path","~$cljs.core/first","~$re-frame.trace/run-tracing-callbacks!","~$cljs.core/merge","~$re-frame.std-interceptors/unwrap","~$re-frame.std-interceptors/on-changes","~$cljs.core/type","~$cljs.core/some"]]],"~:cache-keys",["~#cmap",[["^1I","reagent/impl/batching.cljs"],["4caaa52545ee26bd20d35e6e27879b12ea4f9c3f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^G",[]],"~:deps-syms",["^X","^V","~$reagent.debug","~$reagent.impl.util"]]],["^1I","goog/dom/tagname.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","~$goog.dom.HtmlElement"]]],["^1I","goog/labs/useragent/platform.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1I","goog/math/math.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","~$goog.asserts"]]],["^1I","goog/html/trustedtypes.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","goog/events/eventtype.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","~$goog.events.eventTypeHelpers","~$goog.userAgent"]]],["^1I","goog/labs/useragent/browser.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3E","^3F","~$goog.labs.userAgent.chromiumRebrands","^3I","^3D","^3G","^3H"]]],["^1I","goog/html/safeurl.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3I","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^3D"]]],["^1I","re_frame/loggers.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V","~$clojure.set"]]],["^1I","goog/array/array.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3I"]]],["^1I","reagent/impl/util.cljs"],["4caaa52545ee26bd20d35e6e27879b12ea4f9c3f","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V","~$clojure.string","~$clojure.walk","~$goog.object","^3A"]]],["^1I","goog/useragent/useragent.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3E","~$goog.reflect","^3D"]]],["^1I","goog/debug/error.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","goog/flags/flags.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","goog/events/events.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3I","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","~$goog.events.BrowserFeature","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1I","re_frame/registrar.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V","^1Q","^10","^U"]]],["^1I","goog/events/browserfeature.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","goog/dom/nodetype.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","goog/labs/useragent/highentropy/highentropyvalue.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3E","^3D"]]],["^1I","reagent/ratom.cljs"],["4caaa52545ee26bd20d35e6e27879b12ea4f9c3f","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V","^3B","^3A","~$reagent.impl.batching","^3Q","^3T"]]],["^1I","re_frame/interop.cljs"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V","~$goog.async.nextTick","~$goog.events","~$reagent.core","~$reagent.ratom"]]],["^1I","goog/disposable/disposable.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1I","goog/string/typedstring.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","shadow/js.js"],["285a271cb9a1944c5905eb8f7feb18f53fb4d633","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","goog/object/object.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","reagent/impl/template.cljs"],["4caaa52545ee26bd20d35e6e27879b12ea4f9c3f","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V","^D","^3R","^3B","~$reagent.impl.component","~$reagent.impl.input","~$reagent.impl.protocols","^46","^3A","^3T"]]],["^1I","goog/dom/asserts.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3I"]]],"~:SHADOW-TIMESTAMP",[1759342938000,1759342938000,1759039018000],["^1I","goog/math/long.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3I","^3X"]]],["^1I","goog/events/listener.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","~$goog.events.ListenableKey"]]],["^1I","goog/html/trustedresourceurl.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3I","~$goog.fs.blob","^3M","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3O","^3P"]]],["^1I","goog/events/listenermap.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","~$goog.array","~$goog.events.Listener","^3T"]]],["^1I","goog/events/eventid.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","goog/string/internal.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","goog/functions/functions.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","goog/html/safestyle.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3O","~$goog.html.SafeUrl","^3P","^3I","^3D"]]],["^1I","goog/dom/safe.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3I","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4@","~$goog.html.SafeStyle","^4D","^3N","~$goog.html.uncheckedconversions","^3O","^3D"]]],["^1I","goog/asserts/dom.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","~$goog.dom.TagName","^3I","~$goog.dom.element"]]],["^1I","reagent/impl/component.cljs"],["4caaa52545ee26bd20d35e6e27879b12ea4f9c3f","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V","^3T","^D","^3B","^42","^4<","^46","^3A"]]],["^1I","clojure/walk.cljs"],["29b0d50db86dc25d9e60d7c39586a3f5dfbf4c5b","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V"]]],["^1I","goog/html/safehtml.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3O","^4@","^4I","~$goog.html.SafeStyleSheet","^4D","^4K","^3N","^3P","^3I","^3U","^4B","^3T","^3D","~$goog.dom.tags","^4A"]]],["^1I","goog/dom/tags.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3T"]]],["^1I","goog/math/size.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","goog/labs/useragent/engine.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^4B","^3D","^3E"]]],["^1I","goog/fs/blob.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","re_frame/settings.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V","^1Q","^10"]]],["^1I","goog/dom/dom.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^4B","^3I","^4E","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4K","~$goog.dom.safe","^4H","^4J","~$goog.math.Coordinate","~$goog.math.Size","^3T","~$goog.string","^3O","~$goog.string.Unicode","^3K"]]],["^1I","goog/asserts/asserts.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","~$goog.debug.Error","^4P"]]],["^1I","reagent/impl/protocols.cljs"],["4caaa52545ee26bd20d35e6e27879b12ea4f9c3f","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V"]]],["^1I","goog/uri/uri.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^4B","^3I","~$goog.collections.maps","^4T","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1I","goog/labs/useragent/highentropy/highentropydata.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3F"]]],["^1I","goog/collections/maps.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","goog/events/eventtypehelpers.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3[","^3K"]]],["^1I","re_frame/db.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V","^1Q"]]],["^1I","goog/disposable/idisposable.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","goog/fs/url.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","goog/base.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",[]]],["^1I","goog/structs/structs.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^4B","^3T"]]],["^1I","goog/disposable/dispose.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","clojure/string.cljs"],["29b0d50db86dc25d9e60d7c39586a3f5dfbf4c5b","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V","^4T","~$goog.string.StringBuffer"]]],["^1I","re_frame/cofx.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V","^12","^Q","~$re-frame.registrar","^10"]]],["~:shadow.build.js-support/require","react"],["^D","shadow.js.shim.module$react.js","shadow$bridge","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","~$shadow.js"]]],["^1I","goog/debug/entrypointregistry.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3I"]]],["^1I","goog/string/string.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^4Q","^4J","^3O","^3D"]]],["^1I","re_frame/interceptor.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V","^10","^1Q","^T","^51","^Z","^3Q"]]],["^1I","clojure/data.cljs"],["29b0d50db86dc25d9e60d7c39586a3f5dfbf4c5b","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V","^3Q"]]],["^1I","goog/reflect/reflect.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","goog/labs/useragent/util.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3D","^3H"]]],["^1I","reagent/core.cljs"],["4caaa52545ee26bd20d35e6e27879b12ea4f9c3f","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V","^D","~$reagent.impl.template","^4:","^3B","^42","^4<","^46","^3A"]]],["^1I","goog/debug/debug.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^4B","~$goog.debug.errorcontext"]]],["^1I","goog/string/stringbuffer.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","goog/math/coordinate.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","~$goog.math"]]],["^1I","re_frame/std_interceptors.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V","^Q","^10","^U","^12","^S","^P","^Z","^T"]]],["^1I","goog/debug/errorcontext.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","goog/labs/useragent/chromium_rebrands.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","goog/labs/useragent/useragent.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","~$goog.flags"]]],["^1I","goog/async/nexttick.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3Y","~$goog.dom","^4K","^4G","^3U","^3V"]]],["^1I","goog/dom/element.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^4P","^4K"]]],["^1I","goog/html/uncheckedconversions.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3I","^4H","^4@","^4I","^4M","^4D","^3N","^3O","^3D"]]],["^1I","re_frame/utils.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V","^10","^1Q"]]],["^1I","reagent/impl/input.cljs"],["4caaa52545ee26bd20d35e6e27879b12ea4f9c3f","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V","^4:","^42","^4<"]]],["^1I","goog/events/event.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","~$goog.Disposable","~$goog.events.EventId"]]],["^1I","goog/dom/htmlelement.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","cljs/core.cljs"],["29b0d50db86dc25d9e60d7c39586a3f5dfbf4c5b","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","~$goog.math.Long","~$goog.math.Integer","^4T","^3T","^4B","~$goog.Uri","^50"]]],["^1I","goog/html/safescript.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3O","^3P","^4A","^3I"]]],["^1I","reagent/debug.cljs"],["4caaa52545ee26bd20d35e6e27879b12ea4f9c3f","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V"]]],["^1I","goog/html/safestylesheet.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3O","^4I","^3P","^3T","^3I","^3D"]]],["^1I","goog/events/browserevent.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","~$goog.debug","~$goog.events.Event","~$goog.events.EventType","^3X","^3K"]]],["^1I","goog/math/integer.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3X"]]],["^1I","goog/dom/browserfeature.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3K"]]],["^1I","clojure/set.cljs"],["29b0d50db86dc25d9e60d7c39586a3f5dfbf4c5b","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V"]]],["^1I","goog/uri/utils.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3I","^4T"]]],["^1I","goog/string/const.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^3I","^3P"]]],["^1I","goog/disposable/disposeall.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^48"]]],["^1I","goog/events/listenable.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","goog/events/listenablekey.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X"]]],["^1I","re_frame/trace.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3=",["^ ","^3>",null,"^3?",["^G",[]],"^3@",["^X","^V","^1Q","^10","^4G"]]]]],"~:clj-info",["^ ","jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/analyzer/impl.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/analyzer.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/js_deps.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1759039024000,"jar:file:/Users/paul/.m2/repository/reagent/reagent/2.0.0-alpha2/reagent-2.0.0-alpha2.jar!/reagent/core.clj",1759039024000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/java/io.clj",1759038789000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/core.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/tagged_literals.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/vendor/clojure/data/json.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/compiler.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/instant.clj",1759038789000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/analyzer/impl/namespaces.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/source_map/base64.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/pprint.clj",1759038789000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/vendor/clojure/tools/reader.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/instant.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/reagent/reagent/2.0.0-alpha2/reagent-2.0.0-alpha2.jar!/reagent/ratom.clj",1759039024000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/util.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1759039023000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/core.clj",1759038789000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/set.clj",1759038789000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/string.clj",1759038789000,"jar:file:/Users/paul/.m2/repository/re-frame/re-frame/1.4.3/re-frame-1.4.3.jar!/re_frame/trace.cljc",1759039024000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/re-frame/re-frame/1.4.3/re-frame-1.4.3.jar!/re_frame/interop.clj",1759039024000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/source_map.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/env.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/analyzer/passes/and_or.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/source_map/base64_vlq.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/reagent/reagent/2.0.0-alpha2/reagent-2.0.0-alpha2.jar!/reagent/debug.clj",1759039024000,"jar:file:/Users/paul/.m2/repository/reagent/reagent/2.0.0-alpha2/reagent-2.0.0-alpha2.jar!/reagent/interop.clj",1759039024000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/analyzer/passes.cljc",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/externs.clj",1759039018000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/edn.clj",1759038789000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","contains re-frame supplied, standard interceptors","^7","re_frame/std_interceptors.cljc","^8",1,"^9",5,"^:",1,"^;",30],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",null,"^F",["^G",[]],"^H","^I","^J",["^ "],"^M",null,"^N",["^ ","^O","^P","^Q","^Q","^R","^S","^T","^T","^U","^U","^V","^V","^W","^Q","^X","^X","^Y","^T","^Z","^Z","^[","^U","^10","^10","^11","^Z","^P","^P","^S","^S","^12","^12"],"^13",["^G",["^14"]],"^15",["^ ","^16","^Q","^17","^Q","^18","^Q","^19","^Q","^1:","^Q","^1;","^Q","^1<","^10","^1=","^12"],"~:defs",["^ ","~$unwrap",["^ ","^H","^37","^7","re_frame/std_interceptors.cljc","^8",38,"^9",1,"^:",38,"^;",12,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",38,"^9",6,"^:",38,"^;",12],"~:tag",["^G",["~$clj","~$any","~$cljs.core/IMap"]]],"~$on-changes",["^ ","~:protocol-inline",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",211,"^9",8,"^:",211,"^;",18,"~:arglists",["^1@",["~$quote",["^1@",[["~$f","~$out-path","~$&","~$in-paths"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^1@",["~$f","^6F","^6G"]]],"^6D",["^1@",[["~$f","^6F","~$&","^6G"]]],"~:arglists-meta",["^1@",[null]]]],"^H","^38","^7","re_frame/std_interceptors.cljc","^;",18,"^6H",["^ ","^6I",true,"^6J",2,"^6K",2,"^6L",[["^1@",["~$f","^6F","^6G"]]],"^6D",["^1@",[["~$f","^6F","~$&","^6G"]]],"^6M",["^1@",[null]]],"^6L",[["^1@",["~$f","^6F","^6G"]]],"~:protocol-impl",null,"^6J",2,"^6M",["^1@",[null]],"^9",1,"^6I",true,"~:methods",[["^ ","^6J",2,"^6I",true,"^6>",["^G",["^6?","^6@","^6A"]]]],"^8",211,"~:ret-tag","^6@","^:",211,"^6K",2,"~:fn-var",true,"^6D",["^1@",[["~$f","^6F","~$&","^6G"]]]],"~$enrich",["^ ","^6C",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",185,"^9",7,"^:",185,"^;",13,"^6D",["^1@",["^6E",["^1@",[["~$f"]]]]]],"^H","^2L","^7","re_frame/std_interceptors.cljc","^;",13,"^6L",["^1@",[["~$f"]]],"^6N",null,"^6M",["^1@",[null,null]],"^9",1,"^6I",false,"^8",185,"^6P",["^G",["^6?","^6@","^6A"]],"^:",185,"^6K",1,"^6Q",true,"^6D",["^1@",["^6E",["^1@",[["~$f"]]]]]],"~$path",["^ ","^6C",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",158,"^9",7,"^:",158,"^;",11,"^6D",["^1@",["^6E",["^1@",[["~$&","~$args"]]]]],"^6H",["^ ","^6I",true,"^6J",0,"^6K",0,"^6L",[["^1@",["^6T"]]],"^6D",["^1@",[["~$&","^6T"]]],"^6M",["^1@",[null]]]],"^H","^33","^7","re_frame/std_interceptors.cljc","^;",11,"^6H",["^ ","^6I",true,"^6J",0,"^6K",0,"^6L",[["^1@",["^6T"]]],"^6D",["^1@",[["~$&","^6T"]]],"^6M",["^1@",[null]]],"^6L",[["^1@",["^6T"]]],"^6N",null,"^6J",0,"^6M",["^1@",[null]],"^9",1,"^6I",true,"^6O",[["^ ","^6J",0,"^6I",true,"^6>",["^G",["^6?","^6@","^6A"]]]],"^8",158,"^6P","^6@","^:",158,"^6K",0,"^6Q",true,"^6D",["^1@",[["~$&","^6T"]]]],"~$ctx-handler->interceptor",["^ ","^6C",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",134,"^9",7,"^:",134,"^;",31,"^6D",["^1@",["^6E",["^1@",[["~$handler-fn"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"^H","^2N","^7","re_frame/std_interceptors.cljc","^;",31,"^6L",["^1@",[["^6V"]]],"^6N",null,"^6M",["^1@",[null,null]],"^9",1,"^6I",false,"^8",134,"^6P",["^G",["^6?","^6@","^6A"]],"^:",134,"^6K",1,"^6Q",true,"^6D",["^1@",["^6E",["^1@",[["^6V"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"~$debug",["^ ","^H","^20","^7","re_frame/std_interceptors.cljc","^8",14,"^9",1,"^:",14,"^;",11,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",14,"^9",6,"^:",14,"^;",11],"^6>",["^G",["^6?","^6@","^6A"]]],"~$trim-v",["^ ","^H","^2:","^7","re_frame/std_interceptors.cljc","^8",54,"^9",1,"^:",54,"^;",12,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",54,"^9",6,"^:",54,"^;",12],"^6>",["^G",["^6?","^6@","^6A"]]],"~$after",["^ ","^6C",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",198,"^9",7,"^:",198,"^;",12,"^6D",["^1@",["^6E",["^1@",[["~$f"]]]]]],"^H","^2W","^7","re_frame/std_interceptors.cljc","^;",12,"^6L",["^1@",[["~$f"]]],"^6N",null,"^6M",["^1@",[null,null]],"^9",1,"^6I",false,"^8",198,"^6P",["^G",["^6?","^6@","^6A"]],"^:",198,"^6K",1,"^6Q",true,"^6D",["^1@",["^6E",["^1@",[["~$f"]]]]]],"~$fx-handler->interceptor",["^ ","^6C",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",104,"^9",7,"^:",104,"^;",30,"^6D",["^1@",["^6E",["^1@",[["^6V"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :fx ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"^H","^2Q","^7","re_frame/std_interceptors.cljc","^;",30,"^6L",["^1@",[["^6V"]]],"^6N",null,"^6M",["^1@",[null,null]],"^9",1,"^6I",false,"^8",104,"^6P",["^G",["^6?","^6@","^6A"]],"^:",104,"^6K",1,"^6Q",true,"^6D",["^1@",["^6E",["^1@",[["^6V"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :fx ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"~$db-handler->interceptor",["^ ","^6C",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",73,"^9",7,"^:",73,"^;",30,"^6D",["^1@",["^6E",["^1@",[["^6V"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"^H","^2?","^7","re_frame/std_interceptors.cljc","^;",30,"^6L",["^1@",[["^6V"]]],"^6N",null,"^6M",["^1@",[null,null]],"^9",1,"^6I",false,"^8",73,"^6P",["^G",["^6?","^6@","^6A"]],"^:",73,"^6K",1,"^6Q",true,"^6D",["^1@",["^6E",["^1@",[["^6V"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"~$inject-global-interceptors",["^ ","^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",234,"^9",6,"^:",234,"^;",32],"^H","^28","^7","re_frame/std_interceptors.cljc","^;",32,"^9",1,"^8",234,"^:",234,"^6>",["^G",["^6?","^6@","^6A"]],"^6","An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector."]],"^1>",["^ ","^T","^T","^Y","^T","^V","^V"],"~:cljs.analyzer/constants",["^ ","^13",["^G",["~:path","~:re-frame.db/path-history","~:tags","~:original-event","~:group","~:db","~:fx-handler","~:re-frame.std-interceptors/not-found","~:queue","~:warn","~:operation","~:start","~:duration","~:debug","~:trim-v","~:event/handler","~:db-handler","~:event","~:after","~:id","~:effects","~:re-frame.db/path","~:comment","~:inject-global-interceptors","~:error","~:coeffects","~:end","~:unwrap","~:on-changes","~:groupEnd","~:ctx-handler","~:enrich","~:before","~:op-type","~:log"]],"~:order",["^7E","^7?","^7R","^7T","^7C","^7D","^77","^79","^76","^7O","^7M","^75","^7@","^7;","^7B","^7S","^7<","^7A","^7=","^7>","^7L","^74","^7F","^7K","^78","^7P","^73","^7J","^72","^7H","^7G","^7Q","^7N","^7I","^7:"]],"^1E",["^ ","^14",["^G",[]]],"^1F",[],"^1G",["^X","^V","^Q","^10","^U","^12","^S","^P","^Z","^T"]],"^L","^I","~:ns-specs",["^ "],"~:ns-spec-vars",["^G",[]],"~:compiler-options",["^3<",[["^7X","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^7X","~:shadow-tweaks"],null,["^7X","~:source-map-inline"],null,["^7X","~:shadow-optimize-constants"],null,["^7X","~:elide-asserts"],false,["^7X","~:optimize-constants"],null,["^7X","^1L"],null,["^7X","~:external-config"],null,["^7X","~:tooling-config"],null,["^7X","~:emit-constants"],null,["^7X","~:load-tests"],null,["^7X","~:form-size-threshold"],null,["^7X","~:global-goog-object&array"],null,["^7X","~:data-readers"],null,["~:shadow.build/config","~:target"],"~:browser",["^7X","~:infer-externs"],true,["^7X","^1N"],null,["^7Z","~:js-provider"],"~:external",["~:mode"],"~:dev",["^7X","~:fn-invoke-direct"],null,["^7X","~:source-map"],"/dev/null"]]]
{"version":3,"sources":["zero/frontend/re_frame_viewer/view.cljs"],"mappings":"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","names":["zero.frontend.re-frame-viewer.view/save-to-local-storage","key","value","e14179","js/localStorage","cljs.core.pr_str","js/Error","e","js/console.warn","zero.frontend.re-frame-viewer.view/load-from-local-storage","default-value","e14180","stored","cljs.reader.read_string","G__14181","G__14182","zero.frontend.re-frame/reg-sub","db","_","G__14183","G__14184","cljs.core.get_in","G__14185","G__14186","G__14187","G__14188","G__14189","G__14190","zero.frontend.re-frame/reg-event-db","new-visible?","cljs.core/not","cljs.core/assoc-in","G__14191","G__14192","new-hidden?","G__14193","G__14194","p__14195","vec__14196","cljs.core.nth","mode","G__14199","G__14200","visible?","view-mode","hidden?","path-input","current-path","zero.frontend.re-frame-viewer.view/main-container-style","zero.frontend.re-frame-viewer.view/header-container-style","zero.frontend.re-frame-viewer.view/breadcrumb-container-style","zero.frontend.re-frame-viewer.view/ascii-text-style","zero.frontend.re-frame-viewer.view/button-style","active?","zero.frontend.re-frame-viewer.view/ascii-zero","zero.frontend.re-frame-viewer.view/ascii-logo","zero.frontend.re-frame-viewer.view/mode-buttons","cljs.core/deref","current-mode","G__14201","zero.frontend.re-frame/subscribe","G__14202","G__14203","zero.frontend.re-frame/dispatch","cljs.core._EQ_","G__14204","G__14205","cljs.core.merge","zero.frontend.re-frame-viewer.view/breadcrumb-style","zero.frontend.re-frame-viewer.view/breadcrumb-part-style","clickable?","zero.frontend.re-frame-viewer.view/breadcrumb","G__14206","cljs.core/seq","cljs.core.doall","cljs.core.map_indexed","idx","path-part","partial-path","cljs.core.take","path-string","clojure.string.join","cljs.core.map","cljs.core/str","cljs.core/count","G__14207","zero.frontend.re-frame-viewer.view/path-input","p1__14208#","G__14209","G__14210","zero.frontend.re-frame-viewer.view/header-section","zero.frontend.re-frame-viewer.view/content-container-style","zero.frontend.re-frame-viewer.view/get-data-at-path","data","path","cljs.core/empty?","zero.frontend.re-frame-viewer.view/content-display","G__14211","app-db","G__14212","G__14213","filtered-data","G__14214","cljs.core/Keyword","zero.frontend.re-frame-viewer.raw/raw-viewer","zero.frontend.re-frame-viewer.tree/tree-viewer","zero.frontend.re-frame-viewer.view/re-frame-viewer","G__14215","G__14216","zero.frontend.re-frame-viewer.view/use-keyboard-listener","js/shadow.js.shim.module$react.useEffect","handle-keydown","event","and__5023__auto__","or__5025__auto__","G__14217","js/document","zero.frontend.re-frame-viewer.view/keyboard-listener","zero.frontend.re-frame-viewer.view/init!","js/goog.DEBUG","G__14218"],"sourcesContent":["(ns zero.frontend.re-frame-viewer.view\n  (:require\n   [\"react\" :as react]\n   [zero.frontend.re-frame :as r]\n   [zero.frontend.re-frame-viewer.raw :as raw]\n   [zero.frontend.re-frame-viewer.tree :as tree]))\n\n;; LocalStorage helpers\n(defn save-to-local-storage [key value]\n  (try\n    (.setItem js/localStorage key (pr-str value))\n    (catch js/Error e\n      (js/console.warn \"Failed to save to localStorage:\" e))))\n\n(defn load-from-local-storage [key default-value]\n  (try\n    (let [stored (.getItem js/localStorage key)]\n      (if (nil? stored)\n        default-value\n        (cljs.reader/read-string stored)))\n    (catch js/Error e\n      (js/console.warn \"Failed to load from localStorage:\" e)\n      default-value)))\n\n;; State subscriptions\n(r/reg-sub\n  :re-frame-viewer/app-db\n  (fn [db _]\n    db))\n\n(r/reg-sub\n  :re-frame-viewer/visible?\n  (fn [db _]\n    (get-in db [:dev :re-frame-viewer :visible?] \n            (load-from-local-storage \"re-frame-viewer-visible\" false))))\n\n(r/reg-sub\n  :re-frame-viewer/view-mode\n  (fn [db _]\n    (get-in db [:dev :re-frame-viewer :view-mode] \n            (load-from-local-storage \"re-frame-viewer-mode\" :tree))))\n\n(r/reg-sub\n  :re-frame-viewer/hidden?\n  (fn [db _]\n    (get-in db [:dev :re-frame-viewer :hidden?] \n            (load-from-local-storage \"re-frame-viewer-hidden\" false))))\n\n;; Events\n(r/reg-event-db\n  :re-frame-viewer/toggle\n  (fn [db _]\n    (let [new-visible? (not (get-in db [:dev :re-frame-viewer :visible?] false))]\n      (save-to-local-storage \"re-frame-viewer-visible\" new-visible?)\n      (-> db\n          (assoc-in [:dev :re-frame-viewer :visible?] new-visible?)\n          (assoc-in [:dev :re-frame-viewer :hidden?] false)))))\n\n(r/reg-event-db\n  :re-frame-viewer/hide\n  (fn [db _]\n    (let [new-hidden? (not (get-in db [:dev :re-frame-viewer :hidden?] false))]\n      (save-to-local-storage \"re-frame-viewer-hidden\" new-hidden?)\n      (assoc-in db [:dev :re-frame-viewer :hidden?] new-hidden?))))\n\n(r/reg-event-db\n  :re-frame-viewer/set-view-mode\n  (fn [db [_ mode]]\n    (save-to-local-storage \"re-frame-viewer-mode\" mode)\n    (assoc-in db [:dev :re-frame-viewer :view-mode] mode)))\n\n;; Initialize state from localStorage\n(r/reg-event-db\n  :re-frame-viewer/init-from-storage\n  (fn [db _]\n    (let [visible? (load-from-local-storage \"re-frame-viewer-visible\" false)\n          view-mode (load-from-local-storage \"re-frame-viewer-mode\" :tree)\n          hidden? (load-from-local-storage \"re-frame-viewer-hidden\" false)\n          path-input (load-from-local-storage \"tree-viewer-path-input\" \"\")\n          current-path (load-from-local-storage \"tree-viewer-current-path\" [])]\n      (-> db\n          (assoc-in [:dev :re-frame-viewer :visible?] visible?)\n          (assoc-in [:dev :re-frame-viewer :view-mode] view-mode)\n          (assoc-in [:dev :re-frame-viewer :hidden?] hidden?)\n          (assoc-in [:dev :tree-viewer :path-input] path-input)\n          (assoc-in [:dev :tree-viewer :current-path] current-path)))))\n\n;; Styling helpers\n(defn main-container-style [hidden?]\n  {:position \"fixed\"\n   :top \"20px\"\n   :left \"20px\"\n   :right \"20px\"\n   :bottom \"20px\"\n   :z-index 9999\n   :display \"flex\"\n   :flex-direction \"column\"\n   :padding \"24px\"\n   :background \"linear-gradient(135deg, rgba(51, 51, 51, 0.95) 0%, rgba(51, 51, 51, 0.95) 70%, rgba(218, 165, 32, 0.95) 100%)\"\n   :border-radius \"12px\"\n   :box-shadow \"0 4px 12px rgba(0, 0, 0, 0.3)\"\n   :overflow \"hidden\"\n   :opacity (if hidden? 0.15 1)\n   :pointer-events (if hidden? \"none\" \"auto\")})\n\n(defn header-container-style []\n  {:display \"grid\"\n   :grid-template-columns \"auto 1fr\"\n   :gap \"20px\"\n   :align-items \"center\"\n   :margin-bottom \"20px\"})\n\n(defn breadcrumb-container-style []\n  {:margin-bottom \"20px\"\n   :border-bottom \"2px solid #DAA520\"\n   :padding-bottom \"16px\"})\n\n(defn ascii-text-style []\n  {:font-family \"'Courier New', monospace\"\n   :font-size \"14px\"\n   :line-height \"1.2\"\n   :color \"#DAA520\"\n   :font-weight \"bold\"\n   :white-space \"pre\"})\n\n(defn button-style [active?]\n  {:padding \"6px 12px\"\n   :margin \"0 4px\"\n   :font-size \"12px\"\n   :font-family \"'Courier New', monospace\"\n   :background (if active? \"#DAA520\" \"transparent\")\n   :color (if active? \"#333\" \"#DAA520\")\n   :border \"1px solid #DAA520\"\n   :border-radius \"0\"\n   :cursor \"pointer\"\n   :text-transform \"uppercase\"\n   :font-weight \"bold\"\n   :transition \"all 0.2s\"})\n\n;; ASCII ZERO art\n(defn ascii-zero []\n  \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \\n\u255a\u2550\u2550\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\\n  \u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551\\n \u2588\u2588\u2588\u2554\u255d  \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\")\n\n;; Header components\n(defn ascii-logo []\n  [:div {:style (ascii-text-style)}\n   (ascii-zero)])\n\n(defn mode-buttons []\n  (let [current-mode @(r/subscribe [:re-frame-viewer/view-mode])\n        hidden? @(r/subscribe [:re-frame-viewer/hidden?])]\n    [:div {:style {:display \"grid\"\n                   :grid-template-columns \"1fr 1fr auto\"\n                   :gap \"4px\"}}\n     [:button {:on-click #(r/dispatch [:re-frame-viewer/set-view-mode :tree])\n               :style (button-style (= current-mode :tree))}\n      \"TREE\"]\n     [:button {:on-click #(r/dispatch [:re-frame-viewer/set-view-mode :raw])\n               :style (button-style (= current-mode :raw))}\n      \"RAW\"]\n     [:button {:on-click #(r/dispatch [:re-frame-viewer/hide])\n               :style (merge (button-style false)\n                             (when hidden? {:pointer-events \"auto\"}))}\n      \"HIDE\"]]))\n\n(defn breadcrumb-style []\n  {:font-family \"'Courier New', monospace\"\n   :font-size \"12px\"\n   :color \"#DAA520\"\n   :margin-top \"10px\"\n   :margin-bottom \"5px\"\n   :padding \"8px 12px\"\n   :background \"rgba(218, 165, 32, 0.1)\"\n   :border \"1px solid rgba(218, 165, 32, 0.3)\"\n   :border-radius \"0\"})\n\n(defn breadcrumb-part-style [clickable?]\n  {:color (if clickable? \"#DAA520\" \"#999\")\n   :cursor (if clickable? \"pointer\" \"default\")\n   :text-decoration (if clickable? \"underline\" \"none\")\n   :margin \"0 2px\"})\n\n(defn breadcrumb []\n  (let [current-path @(r/subscribe [:tree-viewer/current-path])]\n    (when (seq current-path)\n      [:div {:style (breadcrumb-style)}\n       \"Path: \"\n       (doall\n         (map-indexed\n           (fn [idx path-part]\n             (let [partial-path (take (inc idx) current-path)\n                   path-string (clojure.string/join \" \" (map str partial-path))\n                   clickable? (< idx (dec (count current-path)))]\n               ^{:key idx}\n               [:span\n                [:span {:style (breadcrumb-part-style clickable?)\n                        :on-click (when clickable?\n                                   #(r/dispatch [:tree-viewer/set-path-input path-string]))}\n                 (str path-part)]\n                (when (< idx (dec (count current-path)))\n                  [:span {:style {:color \"#666\" :margin \"0 4px\"}} \"\u2192\"])]))\n           current-path))])))\n\n(defn path-input []\n  (let [path-input @(r/subscribe [:tree-viewer/path-input])]\n    [:input {:type \"text\"\n             :placeholder \"Enter path (e.g. :router :inner-data)\"\n             :value path-input\n             :on-change #(r/dispatch [:tree-viewer/set-path-input (-> % .-target .-value)])\n             :style {:width \"100%\"\n                     :padding \"8px 12px\"\n                     :margin-top \"5px\"\n                     :background \"#222\"\n                     :border \"1px solid #DAA520\"\n                     :border-radius \"0\"\n                     :font-size \"12px\"\n                     :font-family \"'Courier New', monospace\"\n                     :color \"#DAA520\"\n                     :outline \"none\"}}]))\n\n(defn header-section []\n  [:div\n   [:div {:style (header-container-style)}\n    [ascii-logo]\n    [:div\n     [mode-buttons]\n     [path-input]]]\n   [:div {:style (breadcrumb-container-style)}\n    [breadcrumb]]])\n\n;; Content container style\n(defn content-container-style []\n  {:flex \"1\"\n   :overflow \"auto\"\n   :margin-top \"8px\"})\n\n;; Get data at current path helper\n(defn get-data-at-path [data path]\n  (if (empty? path)\n    data\n    (get-in data path)))\n\n;; Content display based on mode\n(defn content-display []\n  (let [view-mode @(r/subscribe [:re-frame-viewer/view-mode])\n        app-db @(r/subscribe [:re-frame-viewer/app-db])\n        current-path @(r/subscribe [:tree-viewer/current-path])\n        filtered-data (get-data-at-path app-db current-path)]\n    [:div {:style (content-container-style)}\n     (case view-mode\n       :raw [raw/raw-viewer filtered-data]\n       :tree [tree/tree-viewer filtered-data current-path]\n       [tree/tree-viewer filtered-data current-path])])) ; default to tree\n\n;; Main viewer component\n(defn re-frame-viewer []\n  (let [visible? @(r/subscribe [:re-frame-viewer/visible?])\n        hidden? @(r/subscribe [:re-frame-viewer/hidden?])]\n    (when visible?\n      [:div {:style (main-container-style hidden?)}\n       [header-section]\n       [content-display]])))\n\n;; Keyboard listener setup\n(defn use-keyboard-listener []\n  (react/useEffect\n   (fn []\n     (let [handle-keydown \n           (fn [event]\n             (when (and (or (.-ctrlKey event) (.-metaKey event))\n                       (= (.-key event) \"m\"))\n               (.preventDefault event)\n               (r/dispatch [:re-frame-viewer/toggle])))]\n       \n       (.addEventListener js/document \"keydown\" handle-keydown)\n       \n       ;; Cleanup\n       (fn []\n         (.removeEventListener js/document \"keydown\" handle-keydown))))\n   #js []))\n\n;; Keyboard listener component (separate from modal)\n(defn keyboard-listener []\n  (use-keyboard-listener)\n  nil) ; Return nothing, just handles the keyboard event\n\n;; Initialize function (dev only)\n(defn init!\n  \"Initialize the re-frame viewer for development\"\n  []\n  (when ^boolean goog.DEBUG\n    ;; Restore state from localStorage\n    (r/dispatch [:re-frame-viewer/init-from-storage])\n    nil))"]}